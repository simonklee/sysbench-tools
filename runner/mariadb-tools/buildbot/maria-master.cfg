# -*- python -*-
# ex: set syntax=python:

#-------------------------------------------------------------------------------
# To reload buildbot:
#  1) check that this file does not have any syntax errors with:
#       sudo -u buildbot PYTHONPATH=/usr/local/buildbot/lib/python python -c 'exec open("maria-master.cfg", "r")'
#     (no output = no syntax errors)
#  2) reload with:
#       sudo /etc/init.d/buildmaster reload
#  3) check the reload process:
#       sudo less /var/lib/buildbot/maria/twistd.log
#     - or -
#       sudo tail -f /var/lib/buildbot/maria/twistd.log
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Notice: Once per day this file is auto-commited into the mariadb-tools
#          project on Launchpad if it has been modified. As a safety feature,
#          in case someone is currently making changes to the file, commits
#          will _not_ take place if the file was modified less than two hours
#          before the cron job runs.
#
#          The cron job runs every morning at 0300
#
#          The auto-commit script does a "bzr pull" prior to checking if there
#          are uncommited changes that need to be commited; but because of the
#          way the script works, the version of this file currently in
#          production trumps all other versions when it comes to deciding what
#          to auto-commit and push, even if the changes on Launchpad are more
#          recent.
#
#          With that in mind, if you are modifing this file, you are encouraged
#          follow the following procedure:
#
#              First:  Branch the mariadb-tools project from Launchpad, if you
#                      haven't already, and prototype and stage your changes
#                      there first. You can commit your changes locally, but
#                      don't push your changes yet.
#
#              Second: When your changes are ready, do a last pull from
#                      Launchpad and a diff of the production file, just to
#                      make sure there are no conflicts with your changes or
#                      that you are not overwriting someone else's more recent
#                      production changes.
#
#              Third:  Assuming you are not erasing someone else's changes,
#                      copy your version of the file to the production
#                      location and reload buildbot.
#
#              Fourth: Test and verify that all is well with your changes after
#                      they are in production.
#
#              Fifth:  Commit your changes in your local branch of
#                      mariadb-tools, if you haven't already, with a meaningful
#                      commit message; and push your changes up to Launchpad.
#-------------------------------------------------------------------------------

# Master configuration file for MariaDB buildbot.
# Copyright (C) 2012  Monty Program AB.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


from buildbot.changes.filter import ChangeFilter


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# We load the slave and database passwords from an external file, so
# that the rest of the configuration can be public.
configDict= { "cfg": { } }
execfile("/etc/buildbot/maria-master-private.cfg", configDict, { })

c['db_url'] = configDict["cfg"]["db_url"]


####### BUILDSLAVES

def mkSlave(name, **kwargs):
    return BuildSlave(name, configDict["cfg"]["slavePasswords"][name], **kwargs)

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [mkSlave("valgrind", max_builds=1)
#              ,mkSlave("centos5", max_builds=1)
#              ,mkSlave("archivist-cnc", max_builds=1)
#              ,mkSlave("archivist-amd64", max_builds=1)
#              ,mkSlave("adutko-amd64", max_builds=1)
#              ,mkSlave("adutko-alpha", max_builds=1)
#              ,mkSlave("toby-sol10", max_builds=1)
#              ,mkSlave("toby-sol10-sparc", max_builds=1)
#               ,mkSlave("psergey-pylon-x86", max_builds=1)
#               ,mkSlave("psergey-pylon-amd64", max_builds=1)
#               ,mkSlave("psergey-foxhole-x86", max_builds=1)
#               ,mkSlave("psergey-pslp2-x86", max_builds=1)
              ,mkSlave("work-opensuse-amd64", max_builds=1)
#              ,mkSlave("sanja-gentoo-x86_64", max_builds=1)
              ,mkSlave("sanja-mac-x86", max_builds=1)
              ,mkSlave("knielsen-kvm-x86", max_builds=4)
              ,mkSlave("opensolaris-x86", max_builds=1)
              ,mkSlave("adutko-centos5-amd64", max_builds=1)
              ,mkSlave("mariadb-brs", max_builds=1)
              ,mkSlave("adutko-ultrasparc3", max_builds=1)
              ,mkSlave("centos56-quality2", max_builds=2)
#             ,mkSlave("philip-win2008r2-amd64", max_builds=1)
#              ,mkSlave("mac-mini-intel", max_builds=1)
              ,mkSlave("haidong-fedora13-x86", max_builds=1)
#             ,mkSlave("haidong-win7-x86", max_builds=1) # can not run 24/7
              ,mkSlave("solaris10-x86", max_builds=1)
              ,mkSlave("jakob-freebsd", max_builds=1)
              ,mkSlave("adutko3", max_builds=1)
              ,mkSlave("wlads-box",max_builds=4)
              ,mkSlave("terrier2", max_builds=2)
              ,mkSlave("wizard-box", max_builds=1)
              ,mkSlave("wizard-box2", max_builds=1)
              ,mkSlave("bbwin1", max_builds=1)
              ,mkSlave("bbwin2", max_builds=1)
              ,mkSlave("bb-win32", max_builds=4)
              ,mkSlave("aps82-204", max_builds=1)
              ,mkSlave("bsd9", max_builds=1)
#              ,mkSlave("macintosh", max_builds=1)
              ,mkSlave("labrador", max_builds=2)
              ,mkSlave("dan_demeter1", max_builds=1)
              ,mkSlave("dan_demeter2", max_builds=1)
               ,mkSlave("raspberrypi", max_builds=1)             
              ,mkSlave("bb01", max_builds=3)
              ,mkSlave("power01", max_builds=3)
              ,mkSlave("power8-vlp01", max_builds=3)
               ]

kvm_slaves=["bb01", "terrier2", "knielsen-kvm-x86"]
# , "centos56-quality2"

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# Get changes from Launchpad branch subscription emails.
# This requires that buildbot@askmonty.org be subscribed to each branch to be tracked.
from buildbot.changes import mail

bzrBranches = {
    "lp:~maria-captains/maria/5.1" : "5.1",
    "lp:~maria-captains/maria/5.2" : "5.2",
    "lp:~maria-captains/maria/mariadb-5.1-knielsen" : "mariadb-5.1-knielsen",
    "lp:~maria-captains/maria/mariadb-5.2-knielsen" : "mariadb-5.2-knielsen",
    "lp:~maria-captains/maria/mariadb-5.1-monty" : "mariadb-5.1-monty",
    "lp:~maria-captains/maria/mariadb-5.2-monty" : "mariadb-5.2-monty",
    "lp:~maria-captains/maria/5.1-release" : "5.1-release",
    "lp:~maria-captains/maria/5.2-release" : "5.2-release",
    "lp:~maria-captains/maria/5.1-serg" : "5.1-serg",
    "lp:~maria-captains/maria/5.2-serg" : "5.2-serg",
    "lp:~maria-captains/maria/5.3-serg" : "5.3-serg",
    "lp:~maria-captains/maria/5.3-knielsen" : "5.3-knielsen",
    "lp:~maria-captains/maria/5.3" : "5.3",
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/mariadb-5.3-monty" : "mariadb-5.3-monty",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/5.5" : "5.5",
    "lp:~maria-captains/maria/5.6" : "5.6",
    "lp:~maria-captains/maria/trunk" : "trunk",
    "lp:~maria-captains/maria/5.5-serg" : "5.5-serg",
    "lp:~maria-captains/maria/5.5-wlad" : "5.5-wlad",
    "lp:~maria-captains/maria/5.5-knielsen" : "5.5-knielsen",
    "lp:~maria-captains/maria/5.5-release" : "5.5-release",
    "lp:~maria-captains/maria/5.5-hf" : "5.5-hf",
    "lp:~maria-captains/maria/5.5-noga-hf" : "5.5-noga-hf",
    "lp:~maria-captains/maria/5.5-jani" : "5.5-jani",
    "lp:~maria-captains/maria/maria-5.5-galera" : "maria-5.5-galera",
    "lp:~maria-captains/maria/maria-10.0-galera" : "maria-10.0-galera",
    "lp:~maria-captains/maria/maria-5.5-monty" : "maria-5.5-monty",
    "lp:~maria-captains/maria/10.0" : "10.0",
    "lp:~maria-captains/maria/10.0-monty" : "10.0-monty",
    "lp:~maria-captains/maria/10.0-serg" : "10.0-serg",
    "lp:~maria-captains/maria/10.0-connect" : "10.0-connect",
    "lp:~maria-captains/maria/10.0-release" : "10.0-release",
    "lp:~maria-captains/maria/10.0-bar" : "10.0-bar",
    "lp:~maria-captains/maria/10-hf" : "10-hf",
    "lp:~maria-captains/maria/10.0-knielsen" : "10.0-knielsen",
    "lp:~maria-captains/maria/10.0-mdev26" : "10.0-mdev26",
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/10.0-spider" : "10.0-spider",
    "lp:~maria-captains/maria/5.5-svoj" : "5.5-svoj",
    "lp:~maria-captains/maria/10.0-mroonga" : "10.0-mroonga",
    "lp:~jplindst/maria/10.0-FusionIO" : "10.0-FusionIO",
    "lp:~maria-captains/maria/10.0-elenst" : "10.0-elenst",
    "lp:~maria-captains/maria/5.5-elenst" : "5.5-elenst",
    }
bzrBranches_JDBC = {
    "lp:~maria-captains/mariadb-java-client/trunk" : "jdbc-trunk",
    "lp:~maria-captains/mariadb-java-client/jdbc-knielsen" : "jdbc-knielsen",
    }

bzrBranches_ODBC = {
    "lp:~maria-captains/mariadb-odbc-driver/trunk" : "odbc-trunk",
    }

bzrBranches_C_CLIENT = {
    "lp:~maria-captains/mariadb-native-client/trunk" : "trunk",
}

bzrBranches_all = dict(bzrBranches)
bzrBranches_all.update(bzrBranches_JDBC)
bzrBranches_all.update(bzrBranches_ODBC)
bzrBranches_all.update(bzrBranches_C_CLIENT)

mailSource = mail.BzrLaunchpadEmailMaildirSource("/var/lib/buildbot/Maildir",
                                                 branchMap=bzrBranches_all)
c['change_source'] = [mailSource]

gitBranches = {
    "https://github.com/MariaDB/server" :
      (
        "10.1",
        "bb-*", # yes, wildcards are ok
      ),
    "git@github.com:skysql/MariaDBEnterprise" :
      (
        "10.0e",
      )
    }

# bzr/git branch filter
import fnmatch
class BranchFilter(ChangeFilter):
    def __init__(self, on_launchpad = {}, on_github = {}):
        self.bzr_branches = on_launchpad
        self.git_branches = on_github

    def filter_change(self, change):
        repo = getattr(change, 'repository', '?')
        branch = getattr(change, 'branch', '?')
        if re.match('(https://|git@)github.com', repo):
            # git branch on github
            for b in self.git_branches.get(repo, ()):
              if fnmatch.fnmatch(branch, b): return True
            return False
        else:
            # bzr branch on launchpad
            return branch == self.bzr_branches.get('lp:' + repo)

    def __repr__(self):
        return "<%s>" % (self.__class__.__name__,)

# Some branches are more important than others...
def myNextBuild(bldr, requests):
  best_r= None
  best_prio= None
  for r in requests:
    if r.source is not None:
      b= r.source.branch
    else:
      b= r.properties.get("branch")
    if b in ["5.1", "5.2", "5.3", "5.5", "10.0", "10.1", "10.0e"]:
        prio= 1
    elif b in ["5.1-release", "5.2-release", "5.3-release", "5.5-release", "10.0-release"]:
        prio= 2
    else:
        prio= 0
    if best_r is None or prio > best_prio:
        best_r= r
        best_prio= prio
  return best_r

# Some builders only run in main trees.
mainTreesList = ["5.1-release", "5.2-release", "5.1",
                 "5.5-release", "10.0", "5.3",
                 "5.2", "10.0-FusionIO",
                 "5.5", "trunk", "maria-5.5-galera", "maria-10.0-galera", "10.0-release", "10.1", "10.0e"
                 ]
def isMainTree(step):
  return step.getProperty("branch") in mainTreesList

# In 5.[123] we use OurDelta legacy bakery scripts.
# In 5.5+ we have the necessary stuff directly in the source tree.
# And 5.5 uses CMake while older use autotools
def branch_is_5_123(step):
  if re.search("5\\.[123]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_5_5_or_later(step):
  return not branch_is_5_123(step)

def branch_is_not_10_0(step):
  if re.search("10\\.[01]", step.getProperty("branch")):
    return False
  else:
    return True

def branch_is_not_10_1(step):
  return not re.search("10\\.1", step.getProperty("branch"))

def branch_is_not_galera(step):
  return not re.search("galera", step.getProperty("branch"))

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# Unused builders:
#    "centos5-debug",
#    "lenny-amd64-dbg", "adutko-alpha",
#    "jaunty-x86-valgrind", "jaunty-amd64-rel",
#    "gentoo-x86-dbg",
#    "ubuntu-x86-dbg",
#    "gentoo-amd64-sanja",
#    "opensolaris-511-x86",
#    "sol10-amd64-dbg", "sol10-sparc32-forte", "sol10-sparc64-forte",
#    "mac-mini-x86-dbg",
#    "win7-x86",	# can not run 24/7
#    "fedora13-x86-dbg",
#    "adutko-generic",
#    "aps82-204-generic"
#    "freebsd-amd64",

myMainBuilders = [
    "work-amd64-valgrind",
    "win32-debug2",
    "win64-release2",
#    "macintosh",
    "labrador",
    "bld-dan-debug",
    "bld-dan-release",
    "raspberrypi",
    "power01",
    "bintar-rhel6-p8"
    ]
from buildbot.scheduler import AnyBranchScheduler, Triggerable
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb",
    change_filter=BranchFilter(on_launchpad=bzrBranches, on_github=gitBranches),
    treeStableTimer=60,
    builderNames=myMainBuilders))

# dgcov script only supports bzr
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-bzronly",
    branches= bzrBranches.values(),
    treeStableTimer=60,
    builderNames=["kvm-dgcov-jaunty-i386"]))

# A scheduler for RQG tests that runs Aria storage engine tests, e.g. recovery
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-mariaengine",
    branches=["5.5", "10.0"
              ],
    treeStableTimer=60,
    builderNames=["rqg-perpush-mariaengine"
                  ]))
# Replication
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-replication",
    branches=["5.5","10.0"],
    treeStableTimer=60,
    builderNames=["rqg-perpush-replication"]))

# The tests were moved to mariadb-rqg-replication,
# if it works all right, this scheduler can be removed
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-replication-checksum",
    branches=["5.2-rpl"],
    treeStableTimer=60,
    builderNames=["rqg-perpush-replication-checksum"]))

# Optimizer
# The tests were moved to win-rqg and win-rqg-se,
# if it works all right, this scheduler can be removed
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-optimizer",
    branches=["5.3-test", "5.3-test2"],
    treeStableTimer=60,
    builderNames=["rqg-perpush-optimizer"]))

# Regression tests for specific bugs
#c['schedulers'].append(AnyBranchScheduler(
#    name="rqg-bugfixes",
#    branches=["5.2", "5.3", "5.5"
#              ],
#    treeStableTimer=60,
#    builderNames=["rqg-perpush-bugfix-tests"
#                  ]))

#
# End of RQG schedulers
#

c['schedulers'].append(AnyBranchScheduler(
    name="jdbc",
    branches= bzrBranches_JDBC.values(),
    treeStableTimer=60,
    builderNames=["win-jdbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="odbc",
    branches= bzrBranches_ODBC.values(),
    treeStableTimer=60,
    builderNames=["win-odbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="c-client",
    branches= bzrBranches_C_CLIENT.values(),
    treeStableTimer=60,
    builderNames=["win-cclient", "mac-cclient",
#                  "centos5-cclient",
                  "centos5-x64-cclient"]
                  ))

# A scheduler for the GCov build

c['schedulers'].append(AnyBranchScheduler(
    name="gcov",
    treeStableTimer=60,
    branches=["5.1", "5.2", "5.3" ],
    builderNames=["gcov"]
))

#
# A scheduler for the build that compiles DBD::mysql, php and the like
#

c['schedulers'].append(AnyBranchScheduler(
    name="compile-connectors",
    treeStableTimer=60,
    branches=["5.1", "5.2", "5.3"],
    builderNames=["compile-connectors"]
))

#
# A scheduler for testing with customer data
#

c['schedulers'].append(AnyBranchScheduler(
    name="test-customer-data",
    treeStableTimer=60,
    branches=["5.2", "5.3", "5.5", "10.0", "10.0e"],
    builderNames=["test-customer-data"]
))



#
# A scheduler for  testing windows changes
#

c['schedulers'].append(AnyBranchScheduler(
    name="windows",
    treeStableTimer=60,
    branches=["5.5-wlad"],
    builderNames=["win32-debug2"]
))

#
# A scheduler for the builder that compiles Net::HandlerSocket and tests handlersocket
# 

c['schedulers'].append(AnyBranchScheduler(
    name="test-handlersocket",
    treeStableTimer=60,
    branches=["5.5", "10.0"],
    builderNames=["test-handlersocket"]
))

# A scheduler for creating tarballs used by non-bzr builders.
c['schedulers'].append(AnyBranchScheduler(
    name="tarbake",
    change_filter=BranchFilter(on_launchpad=bzrBranches, on_github=gitBranches),
    treeStableTimer=60,
    properties= {"bakebranch": "lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes"},
    builderNames=["kvm-tarbake-jaunty-x86"]))

# A scheduler for running those of the kvm-based builders that are run in
# all trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-alltrees",
        builderNames=[
                      "kvm-fulltest",
#                      "kvm-fulltest2",
                      "winx64-packages",
                      "win32-packages",
                      "bsd9-64",
#                      "kvm-deb-hardy-x86",
                      "kvm-deb-wheezy-amd64",
                      "kvm-deb-precise-amd64",
#                      "kvm-rpm-fedora18-amd64",
#                      "kvm-bintar-precise-x86",
                      "kvm-bintar-quantal-x86",
                      "kvm-bintar-centos5-x86",
                      ]))
# A scheduler for running those of the kvm-based builders that are run only
# in main trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly",
        builderNames=[
                      "kvm-rpm-centos5-x86", "kvm-rpm-centos5-amd64",
                      "kvm-rpm-centos6-x86", "kvm-rpm-centos6-amd64",
#                      "kvm-rpm-fedora16-x86", "kvm-rpm-fedora16-amd64",
#                      "kvm-rpm-fedora18-x86",
                      "kvm-rpm-fedora19-x86", "kvm-rpm-fedora19-amd64",
                      "kvm-rpm-fedora20-x86", "kvm-rpm-fedora20-amd64",
#                      "kvm-rpm-opensuse12-x86", "kvm-rpm-opensuse12-amd64",
                      "kvm-rpm-rhel5-x86",
                      "kvm-rpm-rhel5-amd64",
#                     "kvm-rpm-rhel6-x86",  # Some kvm images are missing
#                     "kvm-rpm-rhel6-amd64",
#                      "kvm-deb-debian5-amd64", "kvm-deb-debian5-x86",
                      "kvm-deb-debian6-amd64", "kvm-deb-debian6-x86",
                      "kvm-deb-wheezy-x86",
                      "kvm-deb-sid-amd64", "kvm-deb-sid-x86",
#                      "kvm-deb-hardy-amd64",
                      "kvm-deb-lucid-amd64", "kvm-deb-lucid-x86",
#                      "kvm-deb-maverick-amd64", "kvm-deb-maverick-x86",
#                      "kvm-deb-natty-amd64", "kvm-deb-natty-x86",
#                      "kvm-deb-oneiric-amd64", "kvm-deb-oneiric-x86",
                      "kvm-deb-precise-x86",
#                      "kvm-deb-quantal-amd64", "kvm-deb-quantal-x86",
#                      "kvm-deb-raring-amd64", "kvm-deb-raring-x86",
                      "kvm-deb-saucy-amd64", "kvm-deb-saucy-x86",
                      "kvm-deb-trusty-amd64", "kvm-deb-trusty-x86",
                      "kvm-bintar-hardy-amd64", "kvm-bintar-hardy-x86",
#                      "kvm-bintar-precise-amd64",
                      "kvm-bintar-quantal-amd64",
                      "kvm-bintar-centos5-amd64",
                      "opensolaris-511-bintar",
                      "sol10-64",
                      ]))
# These are no longer used, the distro is out of support or they have been
# superceeded by other builders.
#                      "kvm-rpm-fedora17-x86", "kvm-rpm-fedora17-amd64",
#                      "kvm-zip-winxp-x86",
#                      "kvm-deb-debian4-amd64", "kvm-deb-debian4-x86",
#                      "kvm-deb-intrepid-amd64", "kvm-deb-intrepid-x86",
#                      "kvm-deb-jaunty-amd64", "kvm-deb-jaunty-x86",
#                      "kvm-deb-karmic-amd64", "kvm-deb-karmic-x86",


# kvm-fulltest2 - moved from 'alltrees' to a separate scheduler for 5.5+,
#   because it doesn't compile on 5.1-5.3
c['schedulers'].append(Triggerable(
    name="kvm-sched-fulltest2",
    builderNames=["kvm-fulltest2"]
))


# A scheduler for RQG and storage engine tests on a Windows machine
c['schedulers'].append(AnyBranchScheduler(
    name="windows-rqg-and-SE",
    treeStableTimer=60,
    branches=["5.3","5.5","10.0"],
    builderNames=["win-rqg-se"]
))


# A scheduler for debian packaging tests
c['schedulers'].append(AnyBranchScheduler(
    name="debpkg",
    builderNames=["debpkg-sid", "debpkg-trusty"],
    change_filter=ChangeFilter(project="MariaDB",
                               repository="https://github.com/ottok/mariadb-5.5")))


# Prioritize the builders that trigger other builds.
# This avoids getting into a situation where we have free slave resources
# waiting for a triggering build to finish.
# We don't do much else, as we want to avoid starving some builders;
# it is usually more important to prioritize by branch than by builder.
# Note that this relies on Python sort being a stable sort, so default
# order from Buildbot is kept. This is guaranteed from Python 2.2.

from twisted.python import log

def oldprioritizeBuilders(buildmaster, builders):
#    log.msg("Starting prioritizeBuilders")
    def builder_prio_sort_key(b):
        n= b.name
        if n == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return 1
    builders.sort(key=builder_prio_sort_key)
#    log.msg(builders)
    return builders

from twisted.internet import defer
@defer.inlineCallbacks
def prioritizeBuilders(buildmaster, builders):
#    log.msg("Starting prioritizeBuilders")

    # For tarbake priority is 0, which will be the highest.
    # For the rest priority is the oldest request time, 
    # the earlier time, the higher priority.
    # Builders which don't have requests will return None
    # which will go last
    def builder_prio_sort_key(b):
        if b.name == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return b.getOldestRequestTime()

    def xform(bldr):
        d = defer.maybeDeferred(lambda: builder_prio_sort_key(bldr))
	d.addCallback(lambda prio: (prio, bldr))
        return d

    xformed = yield defer.gatherResults(
       [xform(bldr) for bldr in builders])

    # The value is 0 if it is a tarbake, we put it first.
    # None goes last, as it does in the default sorter.
    # Real values are compared
    def tweakedcmp(a, b):
        if a[0] == 0 or b[0] is None:
            return -1
        if b[0] == 0 or a[0] is None:
            return 1
        return cmp(a, b)
    xformed.sort(cmp=tweakedcmp)

    rv = [xf[1] for xf in xformed]
    log.msg("Prioritized builders", rv)
    defer.returnValue(rv)


c['prioritizeBuilders'] = prioritizeBuilders

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

import re
from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Test, SetProperty
from buildbot.process.mtrlogobserver import MTR, MtrLogObserver, EqConnectionPool
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.trigger import Trigger

gccWarningPattern= "^(.*?):([0-9]+): [Ww]arning: (.*)$"
vsWarningPattern= "^(?:\s*>[0-9]+)?\s*([^)]*?)\\(([0-9]+)\\)\s*:\s*warning\s*[-_a-zA-Z0-9]+\s*:\s*(.*)$"

def getCompileStep(cmd, subdir="", **kwargs):
    return Compile(command=cmd,
                   warningPattern=gccWarningPattern,
                   warningExtractor=Compile.warnExtractFromRegexpGroups,
                   suppressionFile=WithProperties(subdir + "support-files/compiler_warnings.supp"),
                   **kwargs
                   )

# The private config file instantiates an instance of EqConnectionPool("MySQLdb", ...)
# with the correct database account password etc.
connection_pool = configDict["cfg"]["connectionPool"]

def getMTR(**kwargs):
    return MTR(
        dbpool=connection_pool,
        warningPattern="MTR's internal check of the test case '.*' failed",
        **kwargs)

def on_github(step):
  return re.match('(https://|git@)github.com', step.getProperty('repository'))

def not_on_github(step):
  return not on_github(step)

maybe_git_checkout = Git(repourl=Property('repository'),
                         mode="copy",
                         retry=(10,3),
                         doStepIf=on_github,
                         )

# Have a nice fat checkout timeout.
# Bzr branching can be _really_ slow, especially on modest 'net connections.
maybe_bzr_checkout = Bzr(repourl=WithProperties('lp:%(repository)s'),
                         mode="clobber",
                         forceSharedRepo=True,
                         timeout = 6*3600,
                         doStepIf=not_on_github,
                         )

f1 = factory.BuildFactory()
f1.addStep(maybe_bzr_checkout)
f1.addStep(maybe_git_checkout)
f1.addStep(getCompileStep(["BUILD/compile-amd64-valgrind-max"],
                          env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized",
                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
f1.addStep(getMTR(
        test_type="nm",
        test_info="Valgrind run, no --ps-protocol",
        timeout=9600,  # Longer than mtr timeout, which defaults to 9000 for Valgrind.
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mem --parallel=6 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --retry=3 --skip-ndb --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=6))

#bld_valgrind = {'name': "hardy-amd64-valgrind",
#                'slavename': "valgrind",
#                'builddir': "valgrind",
#                'factory': f1,
#                "nextBuild": myNextBuild,
#                "category": "main",
#                }

bld_work_valgrind = {'name': "work-amd64-valgrind",
                'slavename': "work-opensuse-amd64",
                'builddir': "work-opensuse-amd64",
                'factory': f1,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#compile_dbg_64 = getCompileStep(["BUILD/compile-pentium64-debug-max"])
#test_2 = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"])

# Try if a longer timeout avoids problem in innodb_xtradb_bug317074 test.
#test_longtimeout = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --testcase-timeout=45 --mysqld=--skip-safemalloc --max-save-core=0 --max-save-datadir=1"],
#    timeout=2700)

# f_dbg_2_64 = factory.BuildFactory()
# f_dbg_2_64.addStep(bzr_checkout)
# f_dbg_2_64.addStep(compile_dbg_64)
# f_dbg_2_64.addStep(test_longtimeout)

# f_dbg_2_64_mkshr = factory.BuildFactory()
# f_dbg_2_64_mkshr.addStep(bzr_checkout)
# f_dbg_2_64_mkshr.addStep(compile_dbg_64)
# f_dbg_2_64_mkshr.addStep(test_2)

# f_rel_1_32 = factory.BuildFactory()
# f_rel_1_32.addStep(bzr_checkout)
# f_rel_1_32.addStep(getCompileStep(["BUILD/compile-pentium-max"],
#                                   env={"AM_MAKEFLAGS": "-j1", "EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
# # --testcase-timeout as this host is really slow at some tests.
# f_rel_1_32.addStep(getMTR(
#         test_type="nm",
#         test_info="Normal run, no --ps-protocol",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --mysqld=--skip-safemalloc"],
#         timeout=2700))


# mac mini 2GB, 10.5

test_mac = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"],
    doStepIf=branch_is_5_5_or_later)

# f_dbg_macintosh = factory.BuildFactory()
# f_dbg_macintosh.addStep(bzr_checkout)
# f_dbg_macintosh.addStep(getCompileStep(["sh", "-c", "cmake . && make"],
#                                        env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                             "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
# f_dbg_macintosh.addStep(test_mac)

# bld_macintosh = {"name": "macintosh",
#                  "slavename": "macintosh",
#                  "builddir": "macintosh",
#                  "factory": f_dbg_macintosh,
#                  "nextBuild": myNextBuild,
#                  "category": "main",
#                  }

# mac mini server 8GB, 10.7

#test_labrador = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    env={"MTR_FEEDBACK_PLUGIN": "1",
#         "LC_ALL": "en_GB.UTF-8"},
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"])

f_dbg_labrador = factory.BuildFactory()
f_dbg_labrador.addStep(maybe_bzr_checkout)
f_dbg_labrador.addStep(maybe_git_checkout)
f_dbg_labrador.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=yes && make"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)
f_dbg_labrador.addStep(test_mac)

bld_labrador = {"name": "labrador",
                 "slavename": "labrador",
                 "builddir": "labrador",
                 "factory": f_dbg_labrador,
                 "nextBuild": myNextBuild,
                 "category": "main",
                 }


# raspberrypi

test_raspberrypi = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"])

f_dbg_raspberrypi = factory.BuildFactory()
f_dbg_raspberrypi.addStep(maybe_bzr_checkout)
f_dbg_raspberrypi.addStep(maybe_git_checkout)
f_dbg_raspberrypi.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)
f_dbg_raspberrypi.addStep(test_raspberrypi)

bld_raspberrypi = {"name": "raspberrypi",
                 "slavename": "raspberrypi",
                 "builddir": "raspberrypi",
                 "factory": f_dbg_raspberrypi,
                 "nextBuild": myNextBuild,
                 "category": "main",
                 }

# power01 (IBM Power7 Red Hat 6 Buildslave)

test_power01 = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"],
    doStepIf=branch_is_5_5_or_later)

f_dbg_power01 = factory.BuildFactory()
f_dbg_power01.addStep(maybe_bzr_checkout)
f_dbg_power01.addStep(maybe_git_checkout)
f_dbg_power01.addStep(
     getCompileStep(["sh", "-c", "export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#          "CXX": "g++ -mminimal-toc",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)
f_dbg_power01.addStep(test_power01)

bld_power01 = {"name": "power01",
                 "slavename": "power01",
                 "builddir": "power01",
                 "factory": f_dbg_power01,
                 "nextBuild": myNextBuild,
                 "category": "main",
                 }


##
##

#test_1 = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    env={"MTR_FEEDBACK_PLUGIN": "1"},
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1"])

#f_dbg_sol_64 = factory.BuildFactory()
#f_dbg_sol_64.addStep(bzr_checkout)
#f_dbg_sol_64.addStep(getCompileStep(["BUILD/compile-solaris-amd64-debug"],
#                                    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                         "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_dbg_sol_64.addStep(test_1)

# bld_toby_amd64 = {'name': "sol10-amd64-dbg",
#                      'slavename': "toby-sol10",
#                      'builddir': "toby-sol10",
#                      'factory': f_dbg_sol_64,
#                      "nextBuild": myNextBuild,
#                      "category": "experimental",
#                      }

# f_dbg_sol_sparc32 = factory.BuildFactory()
# f_dbg_sol_sparc32.addStep(bzr_checkout)
# f_dbg_sol_sparc32.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte-32"]))
# f_dbg_sol_sparc32.addStep(test_1)

# bld_toby_sparc32 = {'name': "sol10-sparc32-forte",
#                     'slavename': "toby-sol10-sparc",
#                     'builddir': "toby-sol10-sparc32",
#                     "nextBuild": myNextBuild,
#                     'factory': f_dbg_sol_sparc32,
#                     "category": "new",
#                     }

# f_dbg_sol_sparc64 = factory.BuildFactory()
# f_dbg_sol_sparc64.addStep(bzr_checkout)
# f_dbg_sol_sparc64.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte"]))
# f_dbg_sol_sparc64.addStep(test_1)

# bld_toby_sparc64 = {'name': "sol10-sparc64-forte",
#                     'slavename': "toby-sol10-sparc",
#                     'builddir': "toby-sol10-sparc64",
#                     "nextBuild": myNextBuild,
#                     'factory': f_dbg_sol_sparc64,
#                     "category": "new",
#                     }

# f_sol_sparc_32 = factory.BuildFactory()
# f_sol_sparc_32.addStep(bzr_checkout)
# f_sol_sparc_32.addStep(getCompileStep(["BUILD/compile-solaris-sparc"],
#                                       env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
#                                            "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
# f_sol_sparc_32.addStep(test_1)

# bld_sol_sparc_32 = {"name": "sol-sparc-32",
#                     "slavename": "adutko-ultrasparc3",
#                     "builddir": "adutko-ultrasparc3",
#                     "factory": f_sol_sparc_32,
#                     "nextBuild": myNextBuild,
#                     "category": "main",
#                     }

#f_dbg_alpha = factory.BuildFactory()
#f_dbg_alpha.addStep(bzr_checkout)
#f_dbg_alpha.addStep(getCompileStep(["BUILD/compile-alpha"]))
#f_dbg_alpha.addStep(test_1)
#bld_adutko_alpha = {'name': "adutko-alpha",
#                     'slavename': "adutko-alpha",
#                     'builddir': "adutko-alpha",
#                     'factory': f_dbg_alpha,
#                    "nextBuild": myNextBuild,
#                    "category": "new",
#                     }

#def test_nm(extra=""):
#    return getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode replication, no --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1 --mysqld=--binlog-format=mixed %s" % extra])

#def test_pr(extra=""):
#    return getMTR(
#        test_type="pr",
#        test_info="prepared statement protocol, row-based replication",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1 --mysqld=--binlog-format=row --ps-protocol %s" % extra])

#def test_pbxt(extra=""):
#    return getMTR(
#        test_type="pbxt",
#        test_info="PBXT suite tests",
#        timeout=1800,
#        doStepIf=branch_is_5_123,
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --max-save-core=0 --max-save-datadir=1 --mysqld=--default-storage-engine=pbxt --suite=pbxt %s" % extra])

# f_rel_amd64 = factory.BuildFactory()
# f_rel_amd64.addStep(bzr_checkout)
# f_rel_amd64.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
#                                    env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
# f_rel_amd64.addStep(test_nm())
# f_rel_amd64.addStep(test_pr())
# f_rel_amd64.addStep(test_pbxt())

# bld_rel_amd64 = {'name': "jaunty-amd64-rel",
#                  'slavename': "psergey-pylon-amd64",
#                  'builddir': "psergey-pylon-amd64",
#                  'factory': f_rel_amd64,
#                  "nextBuild": myNextBuild,
#                  "category": "experimental",
#                  }

# Full safemalloc is really hard on slow hosts, so use
# --mysqld=--skip-safemalloc here.
#f_dbg_x86 = factory.BuildFactory()
#f_dbg_x86.addStep(bzr_checkout)
#f_dbg_x86.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
#                                 env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                      "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_dbg_x86.addStep(test_nm("--mysqld=--skip-safemalloc"))
#f_dbg_x86.addStep(test_pr("--mysqld=--skip-safemalloc"))
#f_dbg_x86.addStep(test_pbxt("--mysqld=--skip-safemalloc"))

#bld_dbg_x86 = {'name': "gentoo-x86-dbg",
#               'slavename': "psergey-foxhole-x86",
#               'builddir': "psergey-foxhole-x86",
#               'factory': f_dbg_x86,
#               "nextBuild": myNextBuild,
#               "category": "experimental",
#                 }

# bld_dbg2_x86 = {'name': "ubuntu-x86-dbg",
#                'slavename': "psergey-pslp2-x86",
#                'builddir': "psergey-pslp2-x86",
#                'factory': f_dbg_x86,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                  }


# f_sanja_gentoo_amd64= factory.BuildFactory()
# f_sanja_gentoo_amd64.addStep(bzr_checkout)
# f_sanja_gentoo_amd64.addStep(getCompileStep(["BUILD/compile-amd64-valgrind-max"]))
# f_sanja_gentoo_amd64.addStep(getMTR(
#         test_type="pm",
#         test_info="Valgrind, with --ps-protocol",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=4 --force --retry=3 --valgrind --ps-protocol --max-test-fail=100"],
#         timeout = 3600))
# f_sanja_gentoo_amd64.addStep(getMTR(
#         test_type="nm",
#         test_info="Valgrind in pbxt suite",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=4 --force --retry=3 --valgrind --suite=pbxt --mysqld=--default-storage-engine=pbxt --max-test-fail=100"],
#         timeout = 3600))


# bld_sanja_gentoo_amd64 = {'name': "gentoo-amd64-sanja",
#                'slavename': "sanja-gentoo-x86_64",
#                'builddir': "sanja-gentoo-x86_64",
#                'factory': f_sanja_gentoo_amd64,
#                "nextBuild": myNextBuild,
#                 "category": "experimental",
#               }

# The trees for which we save binary packages.
savedPackageBranches= ["5.1", "5.1-release", "5.2", "5.2-release",
                       "5.3-release", "5.5-release",
                       "mariadb-5.1-knielsen", "mariadb-5.2-knielsen", "5.3",
                       "5.5", "10.0", "maria-5.5-monty",
                       "mariadb-5.2-rpl", "5.1-serg", "5.2-serg", "5.5-jani",
                       "5.5-serg", "5.6", 
                       "maria-5.5-galera", "maria-10.0-galera",
                       "trunk", "10.0-release", "10.0-FusionIO",
                       "5.5-noga-hf","c-client-trunk",
                       "10.0e" ]

def do_step_always(step):
    return True

# Add build steps that will archive binary packages (or source tarball).
# Relies on external cron job to periodically remove old files.
# The packages are saved under the build number of the tarbake step, so it is
# easy to locate all packages for a given release.
#
# The `sources' argument can contain multiple file names separated by spaces
# (it is interpolated directly into a shell `mv' command); and WithProperties
# expansion is performed.
def addPackageArchiveStep(f, sources, tarbuildnum, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(buildername)s"
mkdir -p "%(buildername)s"
""" + 'cp -rp ' + sources + ' "%(buildername)s/"\n' + """
cd "%(buildername)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches and do_step_if(step)),
        slavesrc=WithProperties("%(buildername)s"),
        masterdest=WithProperties("/media/backup/archive/pack/%(branch)s/build-" +
          tarbuildnum + "/%(buildername)s"),
        compress="gz"))

# A similar funtion to addPackageArchiveStep, but for use with uploading builds
# from builders that are not building from tarbake tarballs
# Places builds under /ds413/archive/builds/
def addPackageUploadStep(f, sources, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(revision)s"
mkdir -p "%(revision)s"
chmod 755 "%(revision)s"
""" + 'cp -rp ' + sources + ' "%(revision)s/"\n' + """
cd "%(revision)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
find . -type f|xargs chmod 644
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches and do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds413/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        compress="gz"))

# scp options to work-around ssh warnings as we ssh into many different
# VMs with different host keys.
kvm_scpopt = "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

f_kvm_tarbake_jaunty_x86= factory.BuildFactory()
f_kvm_tarbake_jaunty_x86.addStep(Compile(
        description=["making", "dist"],
        descriptionDone=["make", "dist"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2223.log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port=2223", "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2223.log", "/kvm/vms/vm-lucid-amd64-tarbake.qcow2",
        WithProperties("""
set -ex
rm -fv distdirname.txt bakery.txt mariadb-*.tar.gz bakery-*.tar.gz
mkdir -p bzr git
cd bzr
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  bzr co "%(bakebranch:-lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes)s" build
  cd build
  bakery/preheat.sh
  echo bakery-[0-9]* > bakery.txt
  tar zcf $(cat bakery.txt).tar.gz $(cat bakery.txt)/
  cd $(cat bakery.txt)/
  bzr branch --no-tree "lp:~maria-captains/maria/%(branch)s" local-branch
  bakery/tarbake51.sh %(revision)s local-branch
  cd ..
  mv -v bakery.txt bakery-*.tar.gz ~/
  ;;
*)
  URL="%(repository)s"
  case "$URL" in
  https://github.com/* | git@github.com* )
    cd ~/git
    REMOTE=`git remote -v|grep "$URL.*fetch"|cut -f1`
    if [ -z "$REMOTE" ]; then
      REPO=${URL#*github.com[:/]}
      REMOTE=${REPO/\//-}
      git remote add $REMOTE $URL
    fi
    git fetch --prune $REMOTE
    git checkout --force "%(revision)s"
    git clean -d -f -q -x 
    git reset --hard
    ;;
  *)
    time bzr co "-r%(revision)s" "lp:$URL" build
    cd build
    ;;
  esac
  mkdir mkdist
  cd mkdist
  cmake ..
  make dist
  touch ~/bakery.txt ~/bakery-dummy.tar.gz
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ~/distdirname.txt
mv -v "$(cat ~/distdirname.txt).tar.gz" ~/
"""),
        "= scp -P 2223 buildbot@localhost:distdirname.txt .",
        "= scp -P 2223 buildbot@localhost:bakery.txt .",
        "= scp -P 2223 'buildbot@localhost:mariadb-*.tar.gz' .",
        "= scp -P 2223 'buildbot@localhost:bakery-*.tar.gz' .",
        ],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetProperty(
        property="distdirname",
        command=["cat", "distdirname.txt"],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetProperty(
        property="bakery",
        command=["cat", "bakery.txt"],
        ))
addPackageArchiveStep(f_kvm_tarbake_jaunty_x86, '"%(distdirname)s.tar.gz"', "%(buildnumber)s")
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(distdirname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz")))
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(bakery)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
                              doStepIf=branch_is_5_123))
myTriggerProperties= {
    "tarballpath": WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
    "bakerypath": WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
    "distname": WithProperties("%(distdirname)s.tar.gz"),
    "tarbuildnum": WithProperties("%(buildnumber)s"),
    }
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly"],
        doStepIf=isMainTree,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-fulltest2"],
        doStepIf=branch_is_5_5_or_later,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-alltrees"],
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

bld_kvm_tarbake_jaunty_x86 = {"name": "kvm-tarbake-jaunty-x86",
                              "slavenames": kvm_slaves,
                              "builddir": "kvm-tarbake-jaunty-x86",
                              "factory": f_kvm_tarbake_jaunty_x86,
                              "nextBuild": myNextBuild,
                              "category": "package",
                             }

def getRpmBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves):
    distro = name.split('-')[2]
    rpm_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-build.qcow2",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        doStepIf=branch_is_5_123))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/media/backup/archive/rpm/mariadb-shared-5.3-"+name+".rpm"),
        slavedest=WithProperties("mariadb-shared-5.3-"+name+".rpm"),
        doStepIf=branch_is_5_5_or_later))
    rpm_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) from=%(bakery)s.tar.gz ;; *) from=mariadb-shared-5.3-"+name+".rpm ;; esac;  scp -P "+port+" "+kvm_scpopt+" $from buildbot@localhost:buildbot/ "),
        #WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
mkdir rpms srpms
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s
  sudo mv /usr/src/redhat/RPMS/*/*.rpm ../rpms/
  sudo mv /usr/src/redhat/SRPMS/*.rpm ../srpms/
  ;;
*)
  mv ../mariadb-shared-5.3-*.rpm MariaDB-shared-5.3.latest.rpm
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  cmake .  -DBUILD_CONFIG=mysql_release -DRPM=""" + distro + """
  umask 022
  make package VERBOSE=1
  mv *.rpm ../rpms/
  ;;
esac
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/build/*rpms .",
    ]))
    addPackageArchiveStep(rpm_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]

    rpm_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
cd buildbot
case "%(branch)s" in
*galera)
  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"

  sudo cat /etc/yum.repos.d/MariaDB.repo
  sudo yum -y --nogpgcheck install rpms/*.rpm MariaDB-client
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  sudo yum -C -y --nogpgcheck install rpms/*.rpm
  sudo /etc/init.d/mysql restart
  mysql -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
  ;;
esac
""")]))
#############################
##### New step: minor upgrade

    rpm_fact.addStep(Test(
        doStepIf=(lambda(step): branch_is_not_galera(step) and branch_is_not_10_1(step)),
        description=["testing", "minor upgrade"],
        descriptionDone=["test", "minor upgrade"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
cd buildbot
  ls /etc/yum.repos.d/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f
  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
  sudo cat /etc/yum.repos.d/MariaDB.repo
  sudo yum clean all
  sudo yum -y -q --nogpgcheck install MariaDB-server MariaDB-client MariaDB-shared 
  sudo /etc/init.d/mysql start
  mysql -uroot -e "select @@version, @@version_comment; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t;"
  sudo yum -y --nogpgcheck upgrade rpms/*.rpm
  mysql -e "select @@version, @@version_comment; use test; insert into t values (2); select * from t; drop table t"
""")]))
##### End of upgrade step
#############################
    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": "package"}

bld_kvm_rpm_centos5_x86 = getRpmBuilder("kvm-rpm-centos5-x86", "vm-centos5-i386",
                                        "2225", "qemu64", "i386", slaves= kvm_slaves)
bld_kvm_rpm_centos5_amd64 = getRpmBuilder("kvm-rpm-centos5-amd64", "vm-centos5-amd64",
                                        "2237", "qemu64", "x86_64", slaves= kvm_slaves)

bld_kvm_rpm_centos6_x86 = getRpmBuilder("kvm-rpm-centos6-x86", "vm-centos6-i386",
                                        "2261", "qemu64", "i386")
bld_kvm_rpm_centos6_amd64 = getRpmBuilder("kvm-rpm-centos6-amd64", "vm-centos6-amd64",
                                        "2262", "qemu64", "x86_64")

#bld_kvm_rpm_fedora16_x86 = getRpmBuilder("kvm-rpm-fedora16-x86", "vm-fedora16-i386",
#                                        "2263", "qemu64", "i386")
#bld_kvm_rpm_fedora16_amd64 = getRpmBuilder("kvm-rpm-fedora16-amd64", "vm-fedora16-amd64",
#                                        "2264", "qemu64", "x86_64")

#bld_kvm_rpm_fedora17_x86 = getRpmBuilder("kvm-rpm-fedora17-x86", "vm-fedora17-i386",
#                                        "2265", "qemu64", "i386")
#bld_kvm_rpm_fedora17_amd64 = getRpmBuilder("kvm-rpm-fedora17-amd64", "vm-fedora17-amd64",
#                                        "2266", "qemu64", "x86_64")

#bld_kvm_rpm_fedora18_x86 = getRpmBuilder("kvm-rpm-fedora18-x86", "vm-fedora18-i386",
#                                        "2277", "qemu64", "i386")
#bld_kvm_rpm_fedora18_amd64 = getRpmBuilder("kvm-rpm-fedora18-amd64", "vm-fedora18-amd64",
#                                        "2278", "qemu64", "x86_64")

bld_kvm_rpm_fedora19_x86 = getRpmBuilder("kvm-rpm-fedora19-x86", "vm-fedora19-i386",
                                        "2289", "qemu64", "i386")
bld_kvm_rpm_fedora19_amd64 = getRpmBuilder("kvm-rpm-fedora19-amd64", "vm-fedora19-amd64",
                                        "2290", "qemu64", "x86_64")

bld_kvm_rpm_fedora20_x86 = getRpmBuilder("kvm-rpm-fedora20-x86", "vm-fedora20-i386",
                                        "2291", "qemu64", "i386")
bld_kvm_rpm_fedora20_amd64 = getRpmBuilder("kvm-rpm-fedora20-amd64", "vm-fedora20-amd64",
                                        "2292", "qemu64", "x86_64")


#bld_kvm_rpm_opensuse12_x86 = getRpmBuilder("kvm-rpm-opensuse12-x86", "vm-opensuse12-i386",
#                                        "2274", "qemu64", "i386")
#bld_kvm_rpm_opensuse12_amd64 = getRpmBuilder("kvm-rpm-opensuse12-amd64", "vm-opensuse12-amd64",
#                                        "2273", "qemu64", "x86_64")

# Some kvm images are missing for rhel8-x86
#bld_kvm_rpm_rhel6_x86 = getRpmBuilder("kvm-rpm-rhel6-x86", "vm-rhel6-x86",
#                                      "2251", "qemu64", "i386")
#bld_kvm_rpm_rhel6_amd64 = getRpmBuilder("kvm-rpm-rhel6-amd64", "vm-rhel6-amd64",
#                                        "2252", "qemu64", "x86_64")
# KVM segfaults on rhel5 kernel sometimes on OpenSUSE 11.4 which is on terrier2,
# so do not use that host.
bld_kvm_rpm_rhel5_x86 = getRpmBuilder("kvm-rpm-rhel5-x86", "vm-rhel5-x86",
                                        "2253", "qemu64", "i386", slaves=kvm_slaves)
bld_kvm_rpm_rhel5_amd64 = getRpmBuilder("kvm-rpm-rhel5-amd64", "vm-rhel5-amd64",
                                        "2254", "qemu64", "x86_64", slaves=kvm_slaves)


# The class Test seems to not have a direct way to completely disable
# warning parsing in logs. So use this impossible-to-match regexp
# instead.
impossibleRe = r"\Z.\A"

def getDebBuilder(name, kvm_image, port, cpu, distro_name, version_name, kvmargs=[], slavenames=kvm_slaves):
    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    # AIO detection in InnoDB/XraDB does not work on the old
    # debian5 kernel. Let's disable aio here, in buildbot.
    if "debian5" in name:
        disable_aio_in_mtr="--mysqld=--loose-disable-innodb-use-native-aio"
    else:
        disable_aio_in_mtr=""
    deb_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    deb_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-build.qcow2",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-install.qcow2",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-upgrade.qcow2",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-upgrade2.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        doStepIf=branch_is_5_123))
    # Extract the compiler warning suppressions file from the source tarball.
    deb_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+ " " + kvm_scpopt +
                       " %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+ kvm_scpopt +" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
mkdir -p debs/binary debs/source
rm -Rf build
mkdir build
cd build
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-deb.sh ../../%(distname)s
  cp `find build-temp-[0-9]*/ -maxdepth 1 -type f` ../../debs/binary/
  ;;
*)
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  export AM_EXTRA_MAKEFLAGS=VERBOSE=1
  echo | debian/autobake-deb.sh
  cp `find .. -maxdepth 1 -type f` ../../debs/binary/
  ;;
esac
cd ../../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageArchiveStep(deb_fact, "debs", "%(tarbuildnum)s")
    deb_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf*) sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db ; sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+distro_name+" "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
sudo apt-get update
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`server"
mysql -uroot -prootpass -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test"
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))
    deb_fact.addStep(Test(
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade.qcow2"] + args + ["--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf*) sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db ; sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+distro_name+" "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
sudo apt-get update
mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit"
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`server'
mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))
    deb_fact.addStep(Test(
        description=["testing", "upgrade2"],
        descriptionDone=["test", "upgrade2"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade2.qcow2"] + args + ["--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf*) sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db ; sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+distro_name+" "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
sudo apt-get update
mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; set global innodb_file_per_table=0; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit" --force
VER=$(echo '%(branch)s' | sed -e "s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/")
GALERA=`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-${GALERA}server mariadb-${GALERA}server-${VER} mariadb-${GALERA}test libmariadbclient-dev mysql-common"
mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(Test(
        doStepIf=branch_is_not_10_1,
        description=["testing", "minor", "dist-upgrade"],
        descriptionDone=["test", "minor", "dist-upgrade"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
	"sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup",
	"sudo rm -rf /tmp/VERSION /tmp/GALERA",
	WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
	WithProperties("sh -c \"case '%(branch)s' in *galera* | *5.5-hf*) echo \\\"galera-\\\" ;; *) echo \\\"\\\" ;; esac\" > /tmp/GALERA"),
	"sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+distro_name+" "+version_name+" main' >> /etc/apt/sources.list\"",
	"""
set -ex
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin mirror2.hs-esslingen.de' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1000' >> /etc/apt/preferences.d/release"
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-$(cat /tmp/GALERA)server'
mysql -uroot -prootpass --skip-column-names -e "show engines" | sort > /tmp/engines.old
mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
mysql -uroot -prootpass --skip-column-names -e "show variables like 'version'" > /tmp/version.old
sudo sh -c "grep 'file:' /etc/apt/sources.list.backup > /etc/apt/sources.list"
sudo rm /etc/apt/preferences.d/release
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get dist-upgrade --allow-unauthenticated -y'
mysql -uroot -prootpass --skip-column-names -e "show engines" | sort > /tmp/engines.new
mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.new
mysql -uroot -prootpass --skip-column-names -e "show variables like 'version'" > /tmp/version.new
diff -u /tmp/engines.old /tmp/engines.new 
diff -u /tmp/plugins.old /tmp/plugins.new 
! diff -u /tmp/version.old /tmp/version.new
""",
	"sudo rm -rf /tmp/engines.old /tmp/engines.new /tmp/plugins.old /tmp/plugins.new /tmp/version.old /tmp/version.new /tmp/GALERA /tmp/VERSION",
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(getMTR(
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--memory=3072", "--logfile=kernel_"+port+".log", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
	"sudo rm -rf /tmp/VERSION /tmp/GALERA",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.0\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
	WithProperties("sh -c \"case '%(branch)s' in *galera* | *5.5-hf*) echo \\\"galera-\\\" ;; *) echo \\\"\\\" ;; esac\" > /tmp/GALERA"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf*) sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db ; sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+distro_name+" "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        """
set -ex
cd buildbot
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-$(cat /tmp/GALERA)server mariadb-$(cat /tmp/GALERA)test'
cd /usr/share/mysql/mysql-test
MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1 """+disable_aio_in_mtr,
	"sudo rm -rf /tmp/VERSION /tmp/GALERA",
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/dev/shm/var/ . || :")]))
    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": "package"}


#bld_kvm_deb_hardy_amd64 = getDebBuilder("kvm-deb-hardy-amd64", "vm-hardy-amd64", "2228", "qemu64", "ubuntu", "hardy")
#bld_kvm_deb_hardy_x86 = getDebBuilder("kvm-deb-hardy-x86", "vm-hardy-i386", "2229", "qemu64", "ubuntu", "hardy")
#bld_kvm_deb_intrepid_amd64 = getDebBuilder("kvm-deb-intrepid-amd64", "vm-intrepid-amd64", "2230", "qemu64")
#bld_kvm_deb_intrepid_x86 = getDebBuilder("kvm-deb-intrepid-x86", "vm-intrepid-i386", "2231", "qemu64")
#bld_kvm_deb_karmic_amd64 = getDebBuilder("kvm-deb-karmic-amd64", "vm-karmic-amd64", "2232", "qemu64")
#bld_kvm_deb_karmic_x86 = getDebBuilder("kvm-deb-karmic-x86", "vm-karmic-i386", "2233", "qemu64")
#bld_kvm_deb_jaunty_amd64 = getDebBuilder("kvm-deb-jaunty-amd64", "vm-jaunty-amd64", "2235", "qemu64")
#bld_kvm_deb_jaunty_x86 = getDebBuilder("kvm-deb-jaunty-x86", "vm-jaunty-i386-deb", "2236", "qemu64")
bld_kvm_deb_lucid_amd64 = getDebBuilder("kvm-deb-lucid-amd64", "vm-lucid-amd64", "2238", "qemu64", "ubuntu", "lucid")
bld_kvm_deb_lucid_x86 = getDebBuilder("kvm-deb-lucid-x86", "vm-lucid-i386", "2239", "qemu64", "ubuntu", "lucid")
#bld_kvm_deb_maverick_amd64 = getDebBuilder("kvm-deb-maverick-amd64", "vm-maverick-amd64", "2246", "qemu64", "ubuntu", "maverick")
#bld_kvm_deb_maverick_x86 = getDebBuilder("kvm-deb-maverick-x86", "vm-maverick-i386", "2247", "qemu64", "ubuntu", "maverick")
#bld_kvm_deb_natty_amd64 = getDebBuilder("kvm-deb-natty-amd64", "vm-natty-amd64", "2255", "qemu64", "ubuntu", "natty")
#bld_kvm_deb_natty_x86 = getDebBuilder("kvm-deb-natty-x86", "vm-natty-i386", "2256", "qemu64", "ubuntu", "natty")
#bld_kvm_deb_oneiric_amd64 = getDebBuilder("kvm-deb-oneiric-amd64", "vm-oneiric-amd64", "2257", "qemu64", "ubuntu", "oneiric")
#bld_kvm_deb_oneiric_x86 = getDebBuilder("kvm-deb-oneiric-x86", "vm-oneiric-i386", "2258", "qemu64", "ubuntu", "oneiric")
bld_kvm_deb_precise_amd64 = getDebBuilder("kvm-deb-precise-amd64", "vm-precise-amd64", "2259", "qemu64", "ubuntu", "precise")
bld_kvm_deb_precise_x86 = getDebBuilder("kvm-deb-precise-x86", "vm-precise-i386", "2260", "qemu64", "ubuntu", "precise")
#bld_kvm_deb_quantal_amd64 = getDebBuilder("kvm-deb-quantal-amd64", "vm-quantal-amd64", "2275", "qemu64", "ubuntu", "quantal")
#bld_kvm_deb_quantal_x86 = getDebBuilder("kvm-deb-quantal-x86", "vm-quantal-i386", "2276", "qemu64", "ubuntu", "quantal")
#bld_kvm_deb_raring_amd64 = getDebBuilder("kvm-deb-raring-amd64", "vm-raring-amd64", "2279", "qemu64", "ubuntu", "raring")
#bld_kvm_deb_raring_x86 = getDebBuilder("kvm-deb-raring-x86", "vm-raring-i386", "2280", "qemu64", "ubuntu", "raring")
bld_kvm_deb_saucy_amd64 = getDebBuilder("kvm-deb-saucy-amd64", "vm-saucy-amd64", "2287", "qemu64", "ubuntu", "saucy")
bld_kvm_deb_saucy_x86 = getDebBuilder("kvm-deb-saucy-x86", "vm-saucy-i386", "2288", "qemu64", "ubuntu", "saucy")
bld_kvm_deb_trusty_amd64 = getDebBuilder("kvm-deb-trusty-amd64", "vm-trusty-amd64", "2293", "qemu64", "ubuntu", "trusty")
bld_kvm_deb_trusty_x86 = getDebBuilder("kvm-deb-trusty-x86", "vm-trusty-i386", "2294", "qemu64", "ubuntu", "trusty")
#bld_kvm_deb_debian5_amd64 = getDebBuilder("kvm-deb-debian5-amd64", "vm-debian5-amd64", "2234", "qemu64", "debian", "lenny")
#bld_kvm_deb_debian5_x86 = getDebBuilder("kvm-deb-debian5-x86", "vm-debian5-i386", "2226", "qemu64", "debian", "lenny")
bld_kvm_deb_debian6_amd64 = getDebBuilder("kvm-deb-debian6-amd64", "vm-debian6-amd64", "2244", "qemu64", "debian", "squeeze")
bld_kvm_deb_debian6_x86 = getDebBuilder("kvm-deb-debian6-x86", "vm-debian6-i386", "2245", "qemu64", "debian", "squeeze")
bld_kvm_deb_wheezy_amd64 = getDebBuilder("kvm-deb-wheezy-amd64", "vm-wheezy-amd64", "2269", "qemu64", "debian", "wheezy")
bld_kvm_deb_wheezy_x86 = getDebBuilder("kvm-deb-wheezy-x86", "vm-wheezy-i386", "2270", "qemu64", "debian", "wheezy")
bld_kvm_deb_sid_amd64 = getDebBuilder("kvm-deb-sid-amd64", "vm-sid-amd64", "2295", "qemu64", "debian", "sid")
bld_kvm_deb_sid_x86 = getDebBuilder("kvm-deb-sid-x86", "vm-sid-i386", "2296", "qemu64", "debian", "sid")
#
# Some serious kvm/kernel problem on debian4, need aggressive retry
#bld_kvm_deb_debian4_amd64 = getDebBuilder("kvm-deb-debian4-amd64", "vm-debian4-amd64", "2240", "qemu64", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-amd64-netinst.iso"])
#bld_kvm_deb_debian4_x86 = getDebBuilder("kvm-deb-debian4-x86", "vm-debian4-i386", "2241", "qemu32,-nx", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-i386-netinst.iso"])


def getBintarBuilder(name, kvm_image, port, cpu):
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-build.qcow2",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        doStepIf=branch_is_5_123))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  mkdir build
  cd build
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-bintar.sh ../../%(distname)s
  ;;
*)
  tar zxf "%(distname)s"
  mv "%(distdirname)s" build
  cd build
  mkdir mkbin
  cd mkbin
  cmake -DBUILD_CONFIG=mysql_release ..
  make -j4 package VERBOSE=1
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))
    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": "package" }

bld_kvm_bintar_hardy_amd64 = getBintarBuilder("kvm-bintar-hardy-amd64", "vm-hardy-amd64", "2227", "qemu64")
bld_kvm_bintar_hardy_x86 = getBintarBuilder("kvm-bintar-hardy-x86", "vm-hardy-i386", "2222", "qemu64")

#bld_kvm_bintar_precise_amd64 = getBintarBuilder("kvm-bintar-precise-amd64", "vm-precise-amd64", "2267", "qemu64")
#bld_kvm_bintar_precise_x86 = getBintarBuilder("kvm-bintar-precise-x86", "vm-precise-i386", "2268", "qemu64")

bld_kvm_bintar_quantal_amd64 = getBintarBuilder("kvm-bintar-quantal-amd64", "vm-quantal-amd64", "2281", "qemu64")
bld_kvm_bintar_quantal_x86 = getBintarBuilder("kvm-bintar-quantal-x86", "vm-quantal-i386", "2282", "qemu64")

bld_kvm_bintar_centos5_amd64 = getBintarBuilder("kvm-bintar-centos5-amd64", "vm-centos5-amd64", "2285", "qemu64")
bld_kvm_bintar_centos5_x86 = getBintarBuilder("kvm-bintar-centos5-x86", "vm-centos5-i386", "2286", "qemu64")

# def getWinBuilder(name, kvm_image, port1, port2, cpu, kvmargs=[]):
#     args= ["--windows", "--user=buildbot", "--cpu="+cpu, "--smp=4"] + kvmargs
#     bin_fact = factory.BuildFactory()
#     bin_fact.addStep(FileDownload(
#         mastersrc=WithProperties("%(tarballpath)s"),
#         slavedest=WithProperties("%(distname)s")))
#     # Extract the compiler warning suppressions file from the source tarball.
#     bin_fact.addStep(ShellCommand(
#         description=["getting", ".supp"],
#         descriptionDone=["get", ".supp"],
#         command=["sh", "-c", WithProperties("""
# rm -f compiler_warnings.supp
# tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
# exit 0  # best-effort, not fatal if no suppression file
# """)]))
#     bin_fact.addStep(Compile(
#         description=["making", "noinstall"],
#         descriptionDone=["make", "noinstall"],
#         logfiles={"kernel": "kernel_"+port1+".log"},
#         warningPattern=vsWarningPattern,
#         warningExtractor=Compile.warnExtractFromRegexpGroups,
#         suppressionFile=WithProperties("compiler_warnings.supp"),
#         env={"TERM": "vt102"},
#         command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-vs2008.qcow2"] + args + ["--port="+port1, "--logfile=kernel_"+port1+".log", "vm-tmp-"+port1+".qcow2",
#         "rm -Rf buildbot && mkdir buildbot",
#         WithProperties("= scp -P "+port1+" %(distname)s buildbot@localhost:buildbot/"),
#         WithProperties("""
# set -ex
# cd buildbot
# mkdir build
# cd build
# tar zxf ../%(distname)s
# cd $(basename %(distname)s .tar.gz)
# sh win/make_mariadb_win_dist
# basename mariadb-noinstall-*.zip .zip > ../../bindistname.txt
# if fgrep -q 'INCLUDE(CPack)' CMakeLists.txt ; then cpack -C RelWithDebInfo ; else touch MariaDB-0.0.0-win32.exe ; fi
# basename MariaDB-*.exe .exe > ../../exedistname.txt
# """),
#         WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/mariadb-noinstall-*.zip' ."),
#         WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/MariaDB-*.exe' ."),
#         "= scp -P "+port1+" buildbot@localhost:buildbot/bindistname.txt .",
#         "= scp -P "+port1+" buildbot@localhost:buildbot/exedistname.txt .",
# ]))
#     bin_fact.addStep(SetProperty(
#         property="bindistname",
#         command=["cat", "bindistname.txt"],
#         ))
#     bin_fact.addStep(SetProperty(
#         property="exedistname",
#         command=["cat", "exedistname.txt"],
#         ))
#     bin_fact.addStep(getPackageArchiveStep('"%(bindistname)s.zip" "%(exedistname)s.exe"', "%(tarbuildnum)s"))
#     bin_fact.addStep(getMTR(
#         test_type="nm",
#         test_info="Normal run, no --ps-protocol",
#         logfiles={"kernel": "kernel_"+port2+".log"},
#         timeout=5400,
#         env={"TERM": "vt102"},
#         command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-clean.qcow2"] + args + ["--port="+port2, "--logfile=kernel_"+port2+".log", "vm-tmp-"+port2+".qcow2",
#         "rm -Rf buildbot && mkdir buildbot",
#         WithProperties("= scp -P "+port2+" %(bindistname)s.zip buildbot@localhost:buildbot/"),
#         WithProperties("""
# set -ex
# cd buildbot
# mkdir test
# cd test
# unzip ../%(bindistname)s.zip
# cd mariadb-*-win32/mysql-test
# perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --retry=3 --testcase-timeout=30 --suite-timeout=300 --max-test-fail=20
# """)]))
#
#     return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': bin_fact,
#             "nextBuild": myNextBuild,
#             "category": "package" }


#bld_kvm_zip_winxp_x86 = getWinBuilder("kvm-zip-winxp-x86", "xp-32", "2242", "2243", "qemu32", kvmargs=["--netdev=ne2k_pci"])


#bld_opensolaris_511_x86 = {'name': 'opensolaris-511-x86',
#                           'slavename': 'opensolaris-x86',
#                           'builddir': 'opensolaris-511-x86',
#                           'factory': f_dbg_sol_64,
#                           "nextBuild": myNextBuild,
#                           "category": "main",
#                          }

f_sol_64_bintar = factory.BuildFactory()
f_sol_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                     slavedest=WithProperties("%(distname)s")))
f_sol_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && bash BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                       env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
                                       subdir="%(distdirname)s/"))
f_sol_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR=$(echo mariadb-*.tar.gz)
ORIG_DIR=$(basename ${ORIG_TAR} .tar.gz)
NEW_DIR="$(echo "${ORIG_DIR}" | sed -e 's/-MariaDB//')"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  tar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  tar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol_64_bintar.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_opensolaris_511_bintar = {'name': 'opensolaris-511-bintar',
                              'slavename': 'opensolaris-x86',
                              'builddir': 'opensolaris-511-bintar',
                              'factory': f_sol_64_bintar,
                              "nextBuild": myNextBuild,
                              "category": "package",
                              }

#
# Random Query Generator tests - http://www.launchpad.net/randgen
#

f_rqg_mariaengine = factory.BuildFactory()
f_rqg_mariaengine.addStep(maybe_bzr_checkout)
f_rqg_mariaengine.addStep(maybe_git_checkout)
f_rqg_mariaengine.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
                               env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
                                    "EXTRA_CONFIGS": "--with-embedded-privilege-control",
                                    "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_rqg_mariaengine.addStep(ShellCommand(
#        description=["patching","MTRv1"], descriptionDone=["patched","MTRv1"],
#        workdir=".",
#        command=["sh", "-c", "patch -p 0 --directory=build < mtrv1.patch || true"]))

f_rqg_mariaengine.addStep(ShellCommand(
        name = "bzr_pull_rqg",
        command=["sh", "-c", "bzr pull -d $RQG_HOME"],
        timeout = 3600
));

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_stress --grammar=$RQG_HOME/conf/engines/engine_stress.yy --gendata=$RQG_HOME/conf/engines/engine_stress.zz --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=240 --queries=1M --engine=Aria --rows=10000 --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--safe-mode"],
                description=["RQG", "maria_stress"], name = "rqg_maria_stress"
                ))

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_many_indexes --grammar=$RQG_HOME/conf/engines/many_indexes.yy --gendata=$RQG_HOME/conf/engines/many_indexes.zz  --rows=10000 --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=120 --queries=1M --engine=Aria --rows=10000 --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--safe-mode"],
                description=["RQG", "rqg_maria_many_indexes"], name = "rqg_maria_many_indexes"
                ))

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_tiny_inserts --grammar=$RQG_HOME/conf/engines/tiny_inserts.yy --gendata=$RQG_HOME/conf/engines/tiny_inserts.zz --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=240 --queries=1M --engine=Aria --rows=10000 --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--safe-mode"],
                description=["RQG", "maria_tiny_inserts"], name = "rqg_maria_tiny_inserts"
                ))

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_varchar --grammar=$RQG_HOME/conf/engines/varchar.yy --gendata=$RQG_HOME/conf/engines/varchar.zz --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=120 --queries=1M --engine=Aria --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--loose-skip-innodb --mysqld=--loose-pbxt=OFF --mysqld=--safe-mode --mysqld=--default-storage-engine=Aria"],
                description=["RQG", "maria_varchar"], name = "rqg_maria_varchar"
                ))


f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_smf2 --grammar=$RQG_HOME/conf/smf/smf2.yy --skip-gendata --mysqld=--init-file=$RQG_HOME/conf/smf/smf2.sql --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=120 --queries=1M --engine=Aria --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--loose-skip-innodb --mysqld=--loose-pbxt=OFF --mysqld=--safe-mode --mysqld=--default-storage-engine=Aria"],
                description=["RQG", "maria_smf2"], name = "rqg_maria_smf"
                ))

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=72 --basedir=. --vardir=../../vardir-maria_dbt_dml --grammar=$RQG_HOME/conf/dbt3/dbt3-dml.yy --skip-gendata --mysqld=--init-file=$RQG_HOME/conf/dbt3/dbt3-s0.0001.dump --reporter=Backtrace,ErrorLog,Recovery,Shutdown --duration=120 --queries=1M --engine=Aria --mysqld=--aria-checkpoint-interval=0  --mysqld=--log-output=file --seed=time --mysqld=--loose-skip-innodb --mysqld=--loose-pbxt=OFF --mysqld=--safe-mode --mysqld=--default-storage-engine=Aria"],
                description=["RQG", "maria_dbt_dml"], name = "rqg_maria_dbt_dml"
                ))

bld_rqg_mariaengine = {'name': 'rqg-perpush-mariaengine',
             'slavename': 'centos56-quality2',
             'builddir': 'rqg-perpush-mariaengine',
             'factory': f_rqg_mariaengine,
             "nextBuild": myNextBuild,
             'category': 'experimental',
             }

#
# Regression tests for 5.3 optimizer, to protect against diverging from 5.2 in non-subquery SELECTs
#

f_rqg_optimizer = factory.BuildFactory()
f_rqg_optimizer.addStep(maybe_bzr_checkout)
f_rqg_optimizer.addStep(maybe_git_checkout)
f_rqg_optimizer.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"]))

# Fails due to bug in maria-5.2, and we would like to regression-test maria-5.3 instead
# f_rqg_optimizer.addStep(Test(
#                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=73 --basedir1=. --basedir2=/home/buildbot/static/maria-5.2 --threads=1 --duration=120 --queries=1M --grammar=$RQG_HOME/conf/optimizer/range_access.yy --gendata=$RQG_HOME/conf/optimizer/range_access.zz --validator=ResultsetComparatorSimplify --engine=InnoDB --seed=time --mysqld=--sql_mode=ONLY_FULL_GROUP_BY --mysqld2=--optimizer_switch=index_merge=off --reporter=QueryTimeout,Backtrace,Shutdown"],
#                name = "rqg_optimzer_ranges1"
#                ))

f_rqg_optimizer.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=73 --basedir1=. --basedir2=/home/buildbot/static/maria-5.2 --threads=1 --duration=120 --queries=1M --grammar=$RQG_HOME/conf/optimizer/range_access2.yy --gendata=$RQG_HOME/conf/optimizer/range_access2.zz --validator=ResultsetComparatorSimplify --engine=InnoDB --seed=time --mysqld=--sql_mode=ONLY_FULL_GROUP_BY --mysqld2=--optimizer_switch=index_merge=off --reporter=QueryTimeout,Backtrace,Shutdown"],
                name = "rqg_optimzer_ranges2"
                ))

# Not stable enough for a regression test, server crashes before the end of the test 
# f_rqg_optimizer.addStep(Test(
#                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=73 --basedir1=. --basedir2=/home/buildbot/static/maria-5.2 --threads=1 --duration=120 --queries=1M --grammar=$RQG_HOME/conf/optimizer/optimizer_no_subquery.yy --validator=ResultsetComparatorSimplify --engine=InnoDB --seed=time --mysqld=--sql_mode=ONLY_FULL_GROUP_BY --mysqld2=--optimizer_switch=index_merge=off --reporter=QueryTimeout,Backtrace,Shutdown"],
#                name = "rqg_optimzer_joins"
#                ))

bld_rqg_optimizer = {'name': 'rqg-perpush-optimizer',
             'slavename': 'centos56-quality2',
             'builddir': 'rqg-perpush-optimizer',
             'factory': f_rqg_optimizer,
             "nextBuild": myNextBuild,
             'category': 'experimental',
}

#
# Tests for replication enhancements
#

f_rqg_replication = factory.BuildFactory()
f_rqg_replication.addStep(maybe_bzr_checkout)
f_rqg_replication.addStep(maybe_git_checkout)
f_rqg_replication.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
                               env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
                                    "EXTRA_CONFIGS": "--with-embedded-privilege-control",
                                    "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_rqg_replication.addStep(ShellCommand(
        name = "bzr_pull_rqg",
        command=["sh", "-c", "bzr pull -d $RQG_HOME"],
        timeout = 3600
));

# MWL#116 Efficient group commit for binary log

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_groupcommit --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --threads=10 --queries=1M --duration=300 --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --validator=None --reporter=ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_rbr_groupcommit"
                ))

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_sbr_groupcommit --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=statement --threads=10 --queries=1M --duration=300 --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --validator=None --reporter=ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_sbr_groupcommit"
                ))

# MWL#136 Cross-engine consistency for START TRANSACTION WITH CONSISTENT SNAPSHOT

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_cloneslave --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --threads=10 --queries=1M --duration=300 --validator=None --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --reporter=CloneSlave,Shutdown"],
		name = "rqg_rpl_rbr_cloneslave"
                ))

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_sbr_cloneslave --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=statement --threads=10 --queries=1M --duration=300 --validator=None --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --reporter=CloneSlave,Shutdown"],
		name = "rqg_rpl_sbr_cloneslave"
                ))

# Using Xtrabackup + CHANGE MASTER to provision a new slave

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_cloneslave --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --threads=10 --queries=1M --duration=300 --validator=None --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --reporter=CloneSlaveXtrabackup,Shutdown"],
		name = "rqg_rpl_rbr_xtrabackup"
                ))

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_sbr_cloneslave --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=statement --threads=10 --queries=1M --duration=300 --validator=None --mysqld=--sync_binlog=1 --mysqld=--innodb-flush_log_at_trx_commit=1 --mysqld=--debug_binlog_fsync_sleep=100000 --reporter=CloneSlaveXtrabackup,Shutdown"],
		name = "rqg_rpl_sbr_xtrabackup"
                ))

# MWL#47 Store in binlog text of statements that caused RBR events

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_binlogtext --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --threads=10 --queries=1M --duration=120 --mysqld=--debug=d,slave_crash_if_table_scan --mysqld=--binlog_annotate_row_events=1 --mysqld=--replicate_annotate_row_events=1 --validator=None --reporter=ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_rbr_binlogtext"
                ))

# Row-based replication with no primary key

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_nopk --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions_nopk.zz --rpl_mode=row --threads=10 --queries=1M --duration=120 --validator=None --reporter=ReplicationAnalyzeTable,ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_rbr_nopk"
                ))

f_rqg_replication.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=74 --basedir=. --vardir=../../vardir-rpl_rbr_checksum --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --mysqld=--binlog_checksum=CRC32 --mysqld=--master-verify-checksum=1 --mysqld=--slave-sql-verify-checksum=1 --mysqld=--binlog-annotate-row-events --mysqld=--replicate-annotate-row-events --threads=10 --queries=1M --duration=300 --validator=None --reporter=ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_rbr_checksum"
                ))

bld_rqg_replication = {'name': 'rqg-perpush-replication',
             'slavename': 'centos56-quality2',
             'builddir': 'rqg-perpush-replication',
             'factory': f_rqg_replication,
             "nextBuild": myNextBuild,
             'category': 'main',
             }

# WL #180 Binlog event checksums

f_rqg_replication_checksum = factory.BuildFactory()
f_rqg_replication_checksum.addStep(maybe_bzr_checkout)
f_rqg_replication_checksum.addStep(maybe_git_checkout)
f_rqg_replication_checksum.addStep(getCompileStep(["BUILD/compile-pentium64-debug-max"],
                               env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                    "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_rqg_replication_checksum.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl --mtr-build-thread=75 --basedir=. --vardir=../../vardir-rpl_rbr_checksum --grammar=$RQG_HOME/conf/replication/rpl_transactions.yy --gendata=$RQG_HOME/conf/replication/rpl_transactions.zz --rpl_mode=row --mysqld=--binlog_checksum=CRC32 --mysqld=--master-verify-checksum=1 --mysqld=--slave-sql-verify-checksum=1 --mysqld=--binlog-annotate-row-events --mysqld=--replicate-annotate-row-events --threads=10 --queries=1M --duration=300 --validator=None --reporter=ReplicationConsistency,Shutdown"],
		name = "rqg_rpl_rbr_checksum"
                ))

bld_rqg_replication_checksum = {'name': 'rqg-perpush-replication-checksum',
             'slavename': 'centos56-quality2',
             'builddir': 'rqg-perpush-replication-checksum',
             'factory': f_rqg_replication_checksum,
             "nextBuild": myNextBuild,
             'category': 'experimental',
             }

# End of RQG replication builder



#f_upgrade_mysql51_mariadb52_bintar = factory.BuildFactory()
#f_upgrade_mysql51_mariadb52_bintar.addStep(ShellCommand(
#	name = "initial_cleanup",
#        workdir=".",
#        command=["sh", "-c", WithProperties("rm -rf sources/%(bindistname)s.tar.gz")]
#))

#f_upgrade_mysql51_mariadb52_bintar.addStep(ShellCommand(
#	name = "downloading_bintar",
#        workdir=".",
#        command=["sh", "-c", WithProperties("wget -O sources/%(bindistname)s.tar.gz http://knielsen-hq.org/archive/pack/5.2/build-%(tarbuildnum)s/kvm-bintar-hardy-x86/%(bindistname)s.tar.gz")]
#))

#f_upgrade_mysql51_mariadb52_bintar.addStep(Test(
#	name = "run_upgrade_vm",
#	workdir = ".",
#        logfiles={"kernel": "kernel_upgrade_mysql51_mariadb52_bintar.log"},
#        warningPattern=impossibleRe,
#        env={"TERM": "vt102"},
#        command = [
#		"mariadb-tools/buildbot/runvm", "--port=2223", "-cpu=qemu64", "--base-image=vm/vm-debian5-i386-serial.qcow2", "vm-tmp-upgrade_mysql51_mariadb52_bintar.qcow2",
#		"= scp -P 2223 -i /home/buildbot/buildbot-id_dsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no sources/mysql-5.1.53-linux-i686-glibc23.tar.gz buildbot@localhost:/tmp",
#		"mkdir /tmp/upgrade-test",
#		"tar -C /tmp/upgrade-test --strip-components=1 -xf /tmp/mysql-5.1.53-linux-i686-glibc23.tar.gz",
#		"cd /tmp/upgrade-test && ./scripts/mysql_install_db --basedir=/tmp/upgrade-test --datadir=/tmp/upgrade-test/data",
#		"cd /tmp/upgrade-test && sh -c 'nohup ./bin/mysqld_safe --no-defaults >& /dev/null &'",
#		"= sleep 20",
#		"/tmp/upgrade-test/bin/mysql  --host=127.0.0.1 --port=3306 -uroot -e 'GRANT ALL PRIVILEGES ON *.* TO \"root\" WITH GRANT OPTION'",
#		"= cd sources/mtr/mysql-test && perl mysql-test-run.pl  --verbose-restart --extern host=127.0.0.1 --extern port=2224 --suite=mariadb-upgrade before-common",
#		"/tmp/upgrade-test/bin/mysqladmin --host=127.0.0.1 --port=3306 -uroot shutdown",
#		WithProperties("= scp -P 2223 -i /home/buildbot/buildbot-id_dsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no sources/%(bindistname)s.tar.gz buildbot@localhost:/tmp"),
#		WithProperties("tar -C /tmp/upgrade-test --strip-components=1 -xf /tmp/%(bindistname)s.tar.gz"),
#		"cd /tmp/upgrade-test && sh -c 'nohup ./bin/mysqld_safe --no-defaults >& /dev/null &'",
#		"= sleep 20",
#		"cd /tmp/upgrade-test && ./bin/mysql_upgrade --host=127.0.0.1 --port=3306 -uroot",
#		"= cd sources/mtr/mysql-test && perl mysql-test-run.pl  --verbose-restart --extern host=127.0.0.1 --extern port=2224 --suite=mariadb-upgrade after-common",
#		"/tmp/upgrade-test/bin/mysqladmin --host=127.0.0.1 --port=3306 -uroot shutdown"
#	]))

#bld_upgrade_mysql51_mariadb52_bintar = {
#	'name': 'upgrade-mysql51-maria52-bintar',
#	'slavename': 'centos56-quality2',
#	'builddir': 'upgrade-testing',
#	'factory': f_upgrade_mysql51_mariadb52_bintar,
#        "nextBuild": myNextBuild,
#	'category': 'experimental',
#}

# End of Random Query Generator Tests

# Code coverage

f_gcov= factory.BuildFactory()
f_gcov.addStep(maybe_bzr_checkout)
f_gcov.addStep(maybe_git_checkout)
f_gcov.addStep(getCompileStep(["BUILD/compile-pentium-gcov"],
                              env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));
f_gcov.addStep(ShellCommand(
	description="remove-previous-report",
	command=["sh", "-c", WithProperties("rm -Rf /var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-zerocounters",
	command=["sh", "-c", WithProperties("lcov --directory . --zerocounters")]
))

#f_gcov.addStep(getMTR(
#	test_type="mtr-pbxt", test_info="PBXT test suite",
#        doStepIf=branch_is_5_123,
#	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --mysqld=--loose-sync-sys=0 --suite=pbxt --mysqld=--default-storage-engine=pbxt --force --retry=1 --max-test-fail=100 --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --skip-test=flush_read_lock_kill"],
#	))
f_gcov.addStep(getMTR(
	test_type="mtr-normal", test_info="Standard test suite",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --force --retry=1 --skip-ndb --parallel=3 --testcase-timeout=45 --max-test-fail=100 --skip-combinations --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
	))
f_gcov.addStep(getMTR(
	test_type="mtr-xtra", test_info="Some additional test suites",
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --suite=funcs_1,funcs_2,stress,jp --force --retry=1 --skip-ndb --parallel=3 --testcase-timeout=45 --max-test-fail=200 --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
))

f_gcov.addStep(ShellCommand(
	description="lcov-capture",
	command=["sh", "-c", WithProperties("lcov --directory . --capture --output-file /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-genhtml",
	command=["sh", "-c", WithProperties("genhtml --output-directory=/var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-chmod",
	command=["sh", "-c", WithProperties("chmod -R o+rx /var/www/html/lcov/%(branch)s")]
))


bld_gcov = {"name": "gcov",
               "slavename": "centos56-quality2",
               "builddir": "perpush-gcov",
               "factory": f_gcov,
               "nextBuild": myNextBuild,
               "category": "main",
               }

# End of code coverage

# Builder that compiles DBD::mysql, PHP and the like

f_compile_connectors = factory.BuildFactory()

f_compile_connectors.addStep(maybe_bzr_checkout)
f_compile_connectors.addStep(maybe_git_checkout)
f_compile_connectors.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_compile_connectors.addStep(ShellCommand(
	name="start-test-mysqld",
	command=["sh", "-c", "cd mysql-test && MTR_VERSION=1 perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--skip-safemalloc --master_port=43210 1st"]
))

# DBD::MySQL

f_compile_connectors.addStep(ShellCommand(
	name="unpack-dbi-mysql",
	command=["sh", "-c", "cd .. && tar xfvz DBD-mysql-4.018.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && perl Makefile.PL --mysql_config=../build/scripts/mysql_config --with-mysql=../build/ --libs='-L../build/libmysql/.libs/ -lmysqlclient -lz -lcrypt -lnsl -lm' --cflags='-I../build/include -g  -Wextra -Wwrite-strings -g3 -gdwarf-2 -UFORCE_INIT_OF_VARS -DUNIV_LINUX' --testhost=127.0.0.1 --testport=43210 --testuser=root"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && make"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && PERL5LIB=lib LD_LIBRARY_PATH=./blib/arch/auto/DBD/mysql/:../build/libmysql/.libs/ make test"]
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-dbi-mysql",
	command=["sh", "-c", "rm -rf ../DBD-mysql-4.018/"]
));

#
# PHP with --with-mysql
#

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-oldconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-oldconnector",
	command=["sh", "-c", "mkdir lib && ln -s ../libmysql/.libs/ lib/mysql && cd ../php-5.3.3 && ./configure --with-mysql=../build"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-oldconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-oldconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysql --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
        name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

#
# PHP with --with-mysqli
# 

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-newconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && ./configure --with-mysqli=../fake_mysql_config"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && C_INCLUDE_PATH=../build/include/ make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-newconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysqli --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

f_compile_connectors.addStep(ShellCommand(
	name="stop-test-mysqld",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=43210 shutdown"],
	alwaysRun=True
));

bld_compile_connectors = {"name": "compile-connectors",
               "slavename": "centos56-quality2",
               "builddir": "compile-connectors",
               "factory": f_compile_connectors,
               "nextBuild": myNextBuild,
               "category": "experimental"
}

# end of compile-connectors/DBD::mysql/PHP builder 



f_customer_data = factory.BuildFactory()

f_customer_data.addStep(maybe_bzr_checkout)
f_customer_data.addStep(maybe_git_checkout)
f_customer_data.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_customer_data.addStep(ShellCommand(
	name="customer1-start-server",
	command=["sh", "-c", "cd mysql-test && perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--loose-skip-safemalloc --mtr-build-thread=321 1st"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-create-aria",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/create-aria.sql 2>&1 > customer1-create-aria.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-insert",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-insert.sql 2>&1 > customer1-test-insert.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-update",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-update.sql 2>&1 > customer1-test-update.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-stop-server",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=16420 shutdown"],
	alwaysRun=True
));

f_customer_data.addStep(ShellCommand(
	name="customer1-check-tables",
	command=["sh", "-c", "./storage/maria/aria_chk --verbose --extend-check mysql-test/var/mysqld.1/data/test/*.MAI --datadir mysql-test/var/mysqld.1/data/ 2>&1 > customer1-test-check.log"]
))

bld_customer_data = {"name": "test-customer-data",
               "slavename": "centos56-quality2",
               "builddir": "test-customer-data",
               "factory": f_customer_data,
               "nextBuild": myNextBuild,
               "category": "experimental"
}


# Builder that compiles Net::HandlerSocket and tests handlersocket

f_test_handlersocket = factory.BuildFactory()

f_test_handlersocket.addStep(maybe_bzr_checkout)
f_test_handlersocket.addStep(maybe_git_checkout)

f_test_handlersocket.addStep(
     getCompileStep(["sh", "-c", "make clean || rm -f CMakeCache.txt && cmake . -DCMAKE_BUILD_TYPE=Debug && make -j3"],
     doStepIf=branch_is_5_5_or_later)
)

f_test_handlersocket.addStep(ShellCommand(
	name="build-perl-handlersocket",
        command=["sh", "-c", WithProperties("""
set -ex
cd plugin/handler_socket/perl-Net-HandlerSocket
if [ ! -e Makefile.PL ] ; then
  sed -e "s/LIBS.*/LIBS => ['-L.. -L..\/libhsclient -lhsclient'],/g" Makefile.PL.in | sed -e "s/INC.*/INC => '-I..\/libhsclient -I..\/..\/..\/include',/g" > Makefile.PL
fi
perl Makefile.PL
make
LD_LIBRARY_PATH=../libhsclient/.libs make test
""")]))

f_test_handlersocket.addStep(ShellCommand(
	name="start-mysqld",
	command=["sh", "-c", "cd mysql-test && LD_LIBRARY_PATH=../plugin/handler_socket/libhsclient/.libs perl mysql-test-run.pl --verbose-restart --start-and-exit 1st --mysqld=--loose-handlersocket_port=9998 --mysqld=--loose-handlersocket_port_wr=9999 --mtr-build-thread=963 --mysqld=--innodb"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="install-handlersocket",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'INSTALL PLUGIN handlersocket soname \"handlersocket.so\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-handlersocket-variables",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW VARIABLES LIKE \"%handlersocket%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="test-handlersocket",
	command=["sh", "-c", "cd plugin/handler_socket/regtest/test_01_lib && MYHOST=127.0.0.1 MYPORT=29260 LD_LIBRARY_PATH=../../libhsclient/.libs/ PERL5LIB=../common:../../perl-Net-HandlerSocket/lib:../../perl-Net-HandlerSocket/blib/arch/auto/Net/HandlerSocket/ ./run.sh"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-innodb-status",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW STATUS LIKE \"%innodb%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="shutdown-mysqld",
	command=["sh", "-c", "client/mysqladmin -uroot --protocol=tcp --port=29260 shutdown"],
	alwaysRun=True
))

bld_test_handlersocket = {"name": "test-handlersocket",
               "slavename": "centos56-quality2",
               "builddir": "test-handlersocket",
               "factory": f_test_handlersocket,
               "nextBuild": myNextBuild,
               "category": "experimental"
}

# End of handlersocket build

# Builder for  Hakan's Mac Mini.
#f_mac_mini = factory.BuildFactory()
#f_mac_mini.addStep(bzr_checkout)
#f_mac_mini.addStep(getCompileStep(["BUILD/compile-amd64-debug-max-no-ndb"],
#                                  env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                       "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_mac_mini.addStep(getMTR(
#        test_type="nm",
#        test_info="Mac Mini debug:Normal run, mixed-mode replication, no --ps-protocol",
#        command=["sh", "-c", 'diskutil eject /Volumes/ramdisk ; diskutil erasevolume "Journaled HFS+" "ramdisk" $(hdiutil attach -nomount ram://3145728) ; rm -Rf mysql-test/var ; ln -s /Volumes/ramdisk mysql-test/var ; cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=3 --skip-ndb --mysqld=--binlog-format=mixed']))
#f_mac_mini.addStep(getMTR(
#        test_type="pr",
#        test_info="Mac Mini debug: prepared statement protocol, row-based replication",
#        command=["sh", "-c", 'diskutil eject /Volumes/ramdisk ; diskutil erasevolume "Journaled HFS+" "ramdisk" $(hdiutil attach -nomount ram://3145728) ; rm -Rf mysql-test/var ; ln -s /Volumes/ramdisk mysql-test/var ; cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=3 --skip-ndb --mysqld=--binlog-format=row --ps-protocol']))
#f_mac_mini.addStep(ShellCommand(command=["diskutil", "eject", "/Volumes/ramdisk"],
#                                description=["ejecting"], descriptionDone=["eject"],
#                                alwaysRun=True))

#bld_mac_mini_x86_dbg = {'name': "mac-mini-x86-dbg",
#               'slavename': "mac-mini-intel",
#               'builddir': "mac-mini-intel",
#               'factory': f_mac_mini,
#               "nextBuild": myNextBuild,
#               "category": "main",
#              }

#f_fedora13_x86_dbg = factory.BuildFactory()
#f_fedora13_x86_dbg.addStep(bzr_checkout)
#f_fedora13_x86_dbg.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
#                                           env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS", "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="ps",
#        test_info="Statement-based, --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --skip-ndb --mysqld=--binlog-format=statement --ps-protocol"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="pr",
#        test_info="Row-based, --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --skip-ndb --mysqld=--binlog-format=row --ps-protocol"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="emb",
#        test_info="Embedded server",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --skip-ndb --embedded-server"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="pbxt",
#        test_info="PBXT",
#        doStepIf=branch_is_5_123,
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --suite=pbxt"]))
#
#bld_fedora13_x86_dbg = {'name': "fedora13-x86-dbg",
#                        'slavename': "haidong-fedora13-x86",
#                        'builddir': "fedora13-x86-dbg",
#                        'factory': f_fedora13_x86_dbg,
#                        "nextBuild": myNextBuild,
#                        "category": "new",
#                        }


#f_win7_x86 = factory.BuildFactory()
#f_win7_x86.addStep(bzr_checkout)
#f_win7_x86.addStep(getCompileStep(
#        ["sh win/configure-mariadb.sh"],
#        description=["configuring"],
#        descriptionDone=["configure"],
#        ))
#f_win7_x86.addStep(getCompileStep(
# 	["cmake", "-G", "NMake Makefiles", "-DCMAKE_BUILD_TYPE=RelWithDebInfo"],
#        description=["cmaking"],
#        descriptionDone=["cmake"],
#        ))
#f_win7_x86.addStep(getCompileStep(
#        ["nmake"],
#        description=["nmaking"],
#        descriptionDone=["nmake"],
#        ))
#f_win7_x86.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=2 --skip-ndb --testcase-timeout=45 --suite-timeout=600"],
#        timeout=2700))
#f_win7_x86.addStep(getMTR(
#        test_type="emb",
#        test_info="--embedded-server run",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=2 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --embedded-server"],
#        timeout=2700))
#f_win7_x86.addStep(getMTR(
#        test_type="pbxt",
#        test_info="PBXT run",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --mysqld=--default-storage-engine=pbxt --suite=pbxt"],
#        timeout=2700))

# bld_win7_x86 = {'name': "win7-x86",
#                'slavename': "haidong-win7-x86",
#                'builddir': "win7-x86",
#                'factory': f_win7_x86,
#                "nextBuild": myNextBuild,
#                "category": "new",
#                }


# 
# New builders located on pstoev's host. See http://kb.askmonty.org/v/buildbot-setup-buildbot-setup-for-windows
# for more information, including explanations on the use of taskkill, --mysqld=--gdb and other odditites
#
# Since buildbot slave is unstable on windows, we use a Linux slave which pipes each command to the windows machine
# This way there is no python or buildbot involvement on the Windows side, just a SSHd daemon
#

#f_win2008r2_i386_release = factory.BuildFactory()
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#	alwaysRun=True
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_prepare",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
#));
#
## We can not use Bzr() here because it contains a hard-coded assumption that the bzr client will run on the local machine
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_checkout",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:~maria-captains/maria/%(branch)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
#	timeout = 4*3600
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_version_info",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"version-info", WithProperties("c:\\buildbot\\%(buildername)s\\build")]
#));
#
#f_win2008r2_i386_release.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake . -G \"Visual Studio 9 2008\"")]
#));
#
#f_win2008r2_i386_release.addStep(Compile(
#	name = "build",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake --build . --config RelWithDebInfo --")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_release.addStep(getMTR(
#	test_type="nm", test_info="Normal mode",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500")]
#))
#
#bld_win2008r2_vs2008_i386_release = {
#	'name': "win2008r2-vs2008-i386-release",
#	'slavename': "centos56-quality2",
#	'builddir': "vs2008-i386-release",
#	'factory': f_win2008r2_i386_release,
#        "nextBuild": myNextBuild,
#	'category': "new"
#}

#f_win2008r2_amd64_debug = factory.BuildFactory()
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#       alwaysRun=True
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_prepare",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
#));
#
## We can not use Bzr() here because it contains a hard-coded assumption that the bzr client will run on the local machine
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_checkout",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:~maria-captains/maria/%(branch)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
#	timeout = 4*3600
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_version_info",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"version-info", WithProperties("c:\\buildbot\\%(buildername)s\\build")]
#));
#
#f_win2008r2_amd64_debug.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake . -DWITH_EMBEDDED_SERVER=1 -G \"Visual Studio 10 Win64\"")]
#));
#
#f_win2008r2_amd64_debug.addStep(Compile(
#	name = "build",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake --build . --config Debug -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --force --skip-ndb --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="emb", test_info="Embedded",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --embedded-server --force --parallel=4 --skip-ndb --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="pbxt", test_info="PBXT test suite",
#        doStepIf=branch_is_5_123,
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=pbxt --mysqld=--default-storage-engine=pbxt --force --parallel=4 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="pm", test_info="--ps-protocol mode",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --ps-protocol --force --skip-ndb  --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="xtra", test_info="Some additional test suites",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=funcs_1,funcs_2,stress,jp --force --skip-ndb --parallel=4 --testcase-timeout=45 --max-test-fail=200 --retry=3")]
#))
#
#bld_win2008r2_vs2010_amd64_debug = {
#	'name': "win2008r2-vs2010-amd64-debug",
#	'slavename': "centos56-quality2",
#	'builddir': "vs2010-amd64-Debug",
#	'factory': f_win2008r2_amd64_debug,
#        "nextBuild": myNextBuild,
#	"category": "new"
#}



#f_win2008r2_i386_packages = factory.BuildFactory()
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "create_new_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("mkdir c:\\buildbot\\%(buildername)s\\build || exit 0")]
#));
#
#f_win2008r2_i386_packages.addStep(FileDownload( mastersrc=WithProperties("%(tarballpath)s"), slavedest=WithProperties("%(distdirname)s.tar.gz")) );
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "push_tarball",
#	command=["sh", "-c", WithProperties("echo 'put %(distdirname)s.tar.gz %(buildername)s/build/' | sftp buildbot@win2008r2-build")]
#));
#
## gzip -d is a separate step because tar -z does not work on Windows
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("gzip -d --force c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s.tar.gz")]
#));
#
## we do cd + tar because tar on windows does not allow paths. also tar --strip-components does not work on Windows
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && tar xfv %(distdirname)s.tar")]
#));
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake . -DWITH_EMBEDDED_SERVER=1 -DCOMPILATION_COMMENT=\"mariadb.org binary distribution\" -DWITH_THIRD_PARTY=HeidiSQL  -G \"Visual Studio 10\"")]
#));
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "build_zip",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config Debug -- \"/maxcpucount:4\" && cmake --build . --config RelWithDebInfo --target package -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_packages.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=main --force --skip-ndb --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "build_msi",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config RelWithDebInfo --target win/packaging/msi -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "create_dir",
#	command=["sh", "-c", WithProperties("mkdir %(tarbuildnum)s")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "pull_zip",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.zip %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "pull_msi",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.msi %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "fix_permissions",
#	command=["sh", "-c", WithProperties("chmod -R a+rwx %(tarbuildnum)s/")]
#));
#
#bld_win2008r2_vs2010_i386_packages = {
#	'name': "win2008r2-vs2010-i386-packages",
#	'slavename': "centos56-quality2",
#	'builddir': "win2008r2-vs2010-i386-packages",
#	'factory': f_win2008r2_i386_packages,
#        "nextBuild": myNextBuild,
#	"category": "new"
#}

#f_win2008r2_amd64_packages = factory.BuildFactory()
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "create_new_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("mkdir c:\\buildbot\\%(buildername)s\\build || exit 0")]
#));
#
#f_win2008r2_amd64_packages.addStep(FileDownload( mastersrc=WithProperties("%(tarballpath)s"), slavedest=WithProperties("%(distdirname)s.tar.gz")) );
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "push_tarball",
#	command=["sh", "-c", WithProperties("echo 'put %(distdirname)s.tar.gz %(buildername)s/build/' | sftp buildbot@win2008r2-build")]
#));
#
## gzip -d is a separate step because tar -z does not work on Windows
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("gzip -d --force c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s.tar.gz")]
#));
#
## we do cd + tar because tar on windows does not allow paths. also tar --strip-components does not work on Windows
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && tar xfv %(distdirname)s.tar")]
#));
#
#f_win2008r2_amd64_packages.addStep(Compile(
#	
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake . -DWITH_EMBEDDED_SERVER=1  -DCOMPILATION_COMMENT=\"mariadb.org binary distribution\" -DWITH_THIRD_PARTY=HeidiSQL -G \"Visual Studio 10 Win64\"")]
#));
#
#f_win2008r2_amd64_packages.addStep(Compile(
#	name = "build_zip",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config Debug -- \"/maxcpucount:4\" && cmake --build . --config RelWithDebInfo --target package -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_packages.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=main --force --skip-ndb --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#
#f_win2008r2_amd64_packages.addStep(Compile(
#	name = "build_msi",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config RelWithDebInfo --target win/packaging/msi -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "create_dir",
#	command=["sh", "-c", WithProperties("mkdir %(tarbuildnum)s")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "pull_zip",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.zip %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "pull_msi",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.msi %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "fix_permissions",
#	command=["sh", "-c", WithProperties("chmod -R a+rwx %(tarbuildnum)s/")]
#));
#
#bld_win2008r2_vs2010_amd64_packages = {
#	'name': "win2008r2-vs2010-amd64-packages",
#	'slavename': "centos56-quality2",
#	'builddir': "win2008r2-vs2010-amd64-packages",
#	'factory': f_win2008r2_amd64_packages,
#        "nextBuild": myNextBuild,
#	"category": "new"
#}

 
# New builders located on wlad's host.

f_win32_debug = factory.BuildFactory()

f_win32_debug.addStep(maybe_bzr_checkout)

f_win32_debug.addStep(maybe_git_checkout)

f_win32_debug.addStep(Compile(
	name = "cmake",
	command=["dojob", WithProperties("cmake .")]
));

f_win32_debug.addStep(Compile(
	name = "build",
	command=["dojob", WithProperties("cmake --build . --config Debug")],
	warningPattern=vsWarningPattern,
	warningExtractor=Compile.warnExtractFromRegexpGroups
));

f_win32_debug.addStep(getMTR(
	test_type="nm", test_info="Normal mode",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
	command=["dojob", WithProperties("cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force --suite=main,innodb,plugins --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500 --retry=3")]
))

# This causes failure with "exception interrupted". Need to figure some better
# way to cause a restart.
#f_win32_debug.addStep(ShellCommand(
#        name = "restart service",
#        command=["dojob", WithProperties("sc stop buildbot && timeout 10 && sc start buildbot")],
#        haltOnFailure=False,
#        flunkOnFailure=False,
#        warnOnFailure=False
#));


bld_win32_philip_debug = {
	'name': "win32-debug2",
	'slavename': "bb-win32",
	'builddir': "win32-debug2",
        'vsconfig': "Debug",
	'factory': f_win32_debug,
        "nextBuild": myNextBuild,
	'category': "new"
}



f_win64_release = factory.BuildFactory()

f_win64_release.addStep(maybe_bzr_checkout)

f_win64_release.addStep(maybe_git_checkout)

f_win64_release.addStep(Compile(
	name = "cmake",
	command=["dojob", WithProperties("cmake . -G \"Visual Studio 10 Win64\"")]
));

f_win64_release.addStep(Compile(
	name = "build",
	command=["dojob", WithProperties("cmake --build . --config RelWithDebInfo")],
	warningPattern=vsWarningPattern,
	warningExtractor=Compile.warnExtractFromRegexpGroups
));

f_win64_release.addStep(getMTR(
	test_type="nm", test_info="Normal mode",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
	command=["dojob", WithProperties("cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force --suite=main,plugins --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500 --retry=3")]
));

bld_win64_philip_release = {
	'name': "win64-release2",
	'slavename': "bb-win32",
	'builddir': "win64-release",
	'factory': f_win64_release,
        "nextBuild": myNextBuild,
	'category': "new"
}


# RQG and storage engine tests on a Windows machine (light for 5.3, extended for 5.5 and 10.x)

f_win_rqg_se = factory.BuildFactory()

from buildbot.steps.slave import RemoveDirectory

f_win_rqg_se.addStep(ShellCommand(
        name= "disable_app_verifier",
        command=["dojob", "appverif", "/n", "mysqld.exe"],
        alwaysRun=True
));

f_win_rqg_se.addStep(RemoveDirectory(name="remove_build",       dir=WithProperties("c:\\buildbot\\%(buildername)s\\build")));
f_win_rqg_se.addStep(RemoveDirectory(name="remove_debug_build", dir=WithProperties("c:\\buildbot\\%(buildername)s\\build-debug")));
f_win_rqg_se.addStep(RemoveDirectory(name="remove_last_release",dir=WithProperties("c:\\buildbot\\%(buildername)s\\build-last-release")));
f_win_rqg_se.addStep(RemoveDirectory(name="remove_old_logs",    dir=WithProperties("c:\\buildbot\\vardirs\\%(branch)s-%(revision)s")));

f_win_rqg_se.addStep(ShellCommand(
        name = "bzr_checkout_debug",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:~maria-captains/maria/%(branch)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build-debug")],
        timeout = 4*3600
));

f_win_rqg_se.addStep(ShellCommand(
        name = "bzr_checkout_non_debug",
        command=["dojob", "bzr" ,"checkout", WithProperties("c:\\buildbot\\%(buildername)s\\build-debug"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
	doStepIf=branch_is_5_5_or_later,
        timeout = 4*3600
));

f_win_rqg_se.addStep(ShellCommand(
        name = "bzr_pull_rqg",
        command=["dojob", WithProperties("bzr pull -d c:\\buildbot\\randgen-mariadb-patches && bzr pull -d c:\\buildbot\\rqg-extras")],
        timeout = 3600
));

f_win_rqg_se.addStep(ShellCommand(
        name = "bzr_get_previous_release",
        command=["dojob", WithProperties("perl c:\\buildbot\\rqg-extras\\scripts\\last_release_tag.pl --source-tree=c:/buildbot/%(buildername)s/build-debug --dest-tree=c:/buildbot/%(buildername)s/build-last-release")],
        timeout = 3600
));

f_win_rqg_se.addStep(ShellCommand(
        name = "bzr_version_info",
        command=["dojob", WithProperties("bzr version-info c:\\buildbot\\%(buildername)s\\build-debug && bzr version-info c:\\buildbot\\%(buildername)s\\build-last-release && bzr version-info c:\\buildbot\\randgen-mariadb-patches && bzr version-info c:\\buildbot\\rqg-extras")]
));

f_win_rqg_se.addStep(Compile(
        name = "build_debug",
        command=["dojob", WithProperties("cd c:\\buildbot\\%(buildername)s\\build-debug && cmake . -G \"Visual Studio 10 Win64\" && cmake --build . --config Debug")],
        warningPattern=vsWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups
));

f_win_rqg_se.addStep(getMTR(
        test_type="engines", 
        test_info="Storage engine test suites",
        doStepIf=branch_is_5_5_or_later,
        command=["dojob", WithProperties("cd c:\\buildbot\\%(buildername)s\\build-debug\mysql-test && perl mysql-test-run.pl  --verbose-restart --force --suite=storage_engine-,storage_engine/*- --max-test-fail=0")]
));

f_win_rqg_se.addStep(Test(
        name = "rqg_opt_subquery_myisam",
        command=["dojob", WithProperties("appverif /n mysqld.exe && cd c:\\buildbot\\randgen-mariadb-patches && perl runall.pl --queries=100M --seed=time --threads=4 --duration=300 --reporters=QueryTimeout,Backtrace,ErrorLog,Deadlock,Shutdown --mysqld=--log-output=FILE --grammar=c:/buildbot/rqg-extras/grammars/optimizer_subquery_simple.yy --views --engine=MyISAM --basedir=c:/buildbot/%(buildername)s/build-debug --vardir=c:/buildbot/vardirs/%(branch)s-%(revision)s/optim_sq_myisam")]
));

f_win_rqg_se.addStep(Compile(
        name = "build_previous_release",
        command=["dojob", WithProperties("cd c:\\buildbot\\%(buildername)s\\build-last-release && cmake . -G \"Visual Studio 10 Win64\" && cmake --build . --config RelWithDebInfo")],
        warningPattern=vsWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups
));

f_win_rqg_se.addStep(Test(
        name = "rqg_opt_comparison",
        command=["dojob", WithProperties("cd c:\\buildbot\\randgen-mariadb-patches && perl combinations.pl --config=c:/buildbot/rqg-extras/configs/buildbot-comparison.cc --run-all-combinations-once --force --basedir1=c:/buildbot/%(buildername)s/build-debug --basedir2=c:/buildbot/%(buildername)s/build-last-release --workdir=c:/buildbot/vardirs/%(branch)s-%(revision)s/optim-comparison"), '||', "perl", "c:\\buildbot\\rqg-extras\\scripts\\result_summary.pl", WithProperties("c:/buildbot/vardirs/%(branch)s-%(revision)s/optim-comparison/trial*")]
));

f_win_rqg_se.addStep(Test(
        name = "rqg_bugfix_tests",
        doStepIf=branch_is_5_5_or_later,
        command=["dojob", WithProperties("cd c:\\buildbot\\randgen-mariadb-patches && perl combinations.pl --config=c:/buildbot/rqg-extras/configs/buildbot_regression_tests.cc --run-all-combinations-once --force --basedir=c:/buildbot/%(buildername)s/build-debug --workdir=c:/buildbot/vardirs/%(branch)s-%(revision)s/bugfix_tests")]
));

f_win_rqg_se.addStep(Compile(
        name = "build_relwithdebinfo",
        doStepIf=branch_is_5_5_or_later,
        command=["dojob", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake . -G \"Visual Studio 10 Win64\" && cmake --build . --config RelWithDebInfo")],
	warningPattern=vsWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups
));

f_win_rqg_se.addStep(Test(
        name = "rqg_engine_stress_innodb",
        doStepIf=branch_is_5_5_or_later,
        command=["dojob", WithProperties("cd c:\\buildbot\\randgen-mariadb-patches && appverif /verify mysqld.exe && perl runall.pl --queries=100M --seed=time --threads=16 --duration=600 --reporters=QueryTimeout,Backtrace,ErrorLog,Deadlock,Shutdown --mysqld=--log-output=FILE --grammar=conf/engines/engine_stress.yy --gendata=conf/engines/engine_stress.zz --engine=InnoDB --basedir=c:/buildbot/%(buildername)s/build --vardir=c:/buildbot/vardirs/%(branch)s-%(revision)s/engine_stress_innodb && appverif /n mysqld.exe")]
));

f_win_rqg_se.addStep(Test(
        name = "rqg_opt_ranges2",
        command=["dojob", WithProperties("cd c:\\buildbot\\randgen-mariadb-patches && perl runall.pl --basedir1=c:/buildbot/%(buildername)s/build-debug --basedir2=c:/buildbot/5.2-static --threads=1 --duration=120 --queries=1M --grammar=conf/optimizer/range_access2.yy --gendata=conf/optimizer/range_access2.zz --validator=ResultsetComparatorSimplify --engine=InnoDB --seed=time --mysqld=--sql_mode=ONLY_FULL_GROUP_BY --mysqld2=--optimizer_switch=index_merge=off --reporter=QueryTimeout,Backtrace,Shutdown --vardir1=c:/buildbot/vardirs/%(branch)s-%(revision)s/ranges2-%(branch)s --vardir2=c:/buildbot/vardirs/%(branch)s-%(revision)s/ranges2-5.2")]
));

f_win_rqg_se.addStep(ShellCommand(
        name= "disable_app_verifier_again",
        command=["dojob", "appverif", "/n", "mysqld.exe"],
        alwaysRun=True
));

f_win_rqg_se.addStep(Test(
        name = "app_verifier",
	doStepIf=branch_is_5_5_or_later,
        command=["dojob", WithProperties("appverif -export log -for mysqld.exe -with to=c:/buildbot/vardirs/%(branch)s-%(revision)s/engine_stress_innodb/appverif.xml && cat c:/buildbot/vardirs/%(branch)s-%(revision)s/engine_stress_innodb/appverif.xml")]
))

bld_win_rqg_se = {
        'name': "win-rqg-se",
        'slavenames': ["bbwin1", "bbwin2"],
        'builddir': "win-rqg-se",
        'vsconfig': "Debug",
        'factory': f_win_rqg_se,
        "nextBuild": myNextBuild,
        'category': "new"
}

f_win_jdbc = factory.BuildFactory()
f_win_jdbc.addStep(ShellCommand(
	name = "bzr_prepare",
	command=["dojob", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
));

f_win_jdbc.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" , 
         WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
        name = "bzr_checkout",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:%(repository)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
	name= "build_package",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && build_release")
        ],
        haltOnFailure = True
	));

f_win_jdbc.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_jdbc.addStep(ShellCommand(
        name= "publish",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && xcopy /y /f target\*.jar c:\\build_archive\\%(branch)s\\%(revision)s && xcopy /y /f *.tar.gz c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))


bld_win_jdbc = {
        'name': "win-jdbc",
        'slavename': "bb-win32",
        'builddir': "win-jdbc",
        'factory': f_win_jdbc,
        'category': "new"
}

f_win_odbc = factory.BuildFactory()
f_win_odbc.addStep(ShellCommand(
	name = "bzr_prepare",
	command=["dojob", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
));

f_win_odbc.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" , 
         WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_odbc.addStep(ShellCommand(
        name = "bzr_checkout",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:%(repository)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_odbc.addStep(ShellCommand(
	name= "build_package_32",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\ && rm -rf win32 && mkdir win32 && cd win32 && cmake ../build -G \"Visual Studio 10\" -DWIX_DIR=C:\georg\wix38\ && cmake --build . --config RelWithDebInfo")
        ],
        haltOnFailure = True
	));

f_win_odbc.addStep(ShellCommand(
	name= "build_package_64",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\ && rm -rf win64 && mkdir win64 && cd win64 && cmake ../build -G \"Visual Studio 10 Win64\" -DWIX_DIR=C:\georg\wix38\ && cmake --build . --config RelWithDebInfo")
        ],
        haltOnFailure = True
	));

f_win_odbc.addStep(ShellCommand(
        name= "sign_packages32",
        command=["dojob",
        WithProperties("\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\signtool\" sign /a /t http://timestamp.verisign.com/scripts/timstamp.dll c:\\buildbot\\%(buildername)s\\win32\\wininstall\\*.msi")]
        ))

f_win_odbc.addStep(ShellCommand(
        name= "sign_packages64",
        command=["dojob",
        WithProperties("\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\signtool\" sign /a /t http://timestamp.verisign.com/scripts/timstamp.dll c:\\buildbot\\%(buildername)s\\win64\\wininstall\\*.msi")]
        ))

f_win_odbc.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_odbc.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\win32 && xcopy /y /f wininstall\\*.msi c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))

f_win_odbc.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\win64 && xcopy /y /f wininstall\\*.msi c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))


bld_win_odbc = {
        'name': "win-odbc",
        'slavename': "bb-win32",
        'builddir': "win-odbc",
        'factory': f_win_odbc,
        'category': "new"
}

f_win_cclient = factory.BuildFactory()
f_win_cclient.addStep(ShellCommand(
	name = "bzr_prepare",
	command=["dojob", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
));

f_win_cclient.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" , 
         WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_cclient.addStep(ShellCommand(
        name = "bzr_checkout",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:%(repository)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_cclient.addStep(ShellCommand(
	name= "build_package32-debug",
	command=["dojob",
        WithProperties("SET WIX_DIR=C:\\georg\\wix38 && cd c:\\buildbot\\%(buildername)s && rm -rf win32 && mkdir win32 && cd win32 && cmake ..\\build -G \"Visual Studio 10\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_cclient.addStep(ShellCommand(
	name= "build_package32",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s && cd win32 && del CMakeCache.txt && cmake ..\\build -G \"Visual Studio 10\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWIX_DIR=C:\georg\wix38 && cmake --build . --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_cclient.addStep(ShellCommand(
	name= "build_package64-debug",
	command=["dojob",
        WithProperties("SET WIX_DIR=C:\\georg\\wix38 && cd c:\\buildbot\\%(buildername)s && rm -rf win64 && mkdir win64 && cd win64 && cmake ..\\build -G \"Visual Studio 10 Win64\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_cclient.addStep(ShellCommand(
	name= "build_package64",
	command=["dojob",
        WithProperties("SET WIX_DIR=C:\\georg\\wix38 && cd c:\\buildbot\\%(buildername)s && cd win64 && del CMakeCache.txt && cmake ..\\build -G \"Visual Studio 10 Win64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWIX_DIR=C:\georg\wix38 && cmake --build . --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_cclient.addStep(ShellCommand(
        name= "sign_packages",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\win32 && \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\signtool\" sign /a /t http://timestamp.verisign.com/scripts/timstamp.dll win\packaging\*.msi && cd c:\\buildbot\\%(buildername)s\\win64 && \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Bin\\signtool\" sign /a /t http://timestamp.verisign.com/scripts/timstamp.dll win\packaging\*.msi")]));
f_win_cclient.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
        ))
f_win_cclient.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))

f_win_cclient.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))

bld_win_cclient = {
        'name': "win-cclient",
        'slavename': "bb-win32",
        'builddir': "win-cclient",
        'factory': f_win_cclient,
        'category': "new"
}

f_cclient= factory.BuildFactory()
f_cclient.addStep( 
                  ShellCommand(name="clean", command=["sh", "-c", WithProperties("""
rm -Rf build
""")]))
f_cclient.addStep(maybe_bzr_checkout)
f_cclient.addStep(maybe_git_checkout)

f_cclient.addStep(ShellCommand(name="build", command=["sh", "-c", WithProperties("""
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build . --config RelWithDebInfo --target package
""")]))

bld_labrador_cclient= {
        'name': "mac-cclient",
        'slavename': "labrador",
        'builddir': "mac-cclient",
        'factory': f_cclient,
        'category': "new"
}
# This builder refers to a non-existing slave "kvm-rpm-centos5-x86".
# This causes the config to fail, so I commented it out for now, as well as
# the two references to it elsewhere in the config.
#bld_centos5_cclient= {
#        'name': "centos5-cclient",
#        'slavename': "kvm-rpm-centos5-x86",
#        'builddir': "centos5-cclient",
#        'factory': f_cclient,
#        'category': "new"
#}
bld_centos5_x64_cclient= {
        'name': "centos5-x64-cclient",
        'slavename': "centos56-quality2",
        'builddir': "centos5-x64-cclient",
        'factory': f_cclient,
        'category': "new"
}

## Windows packages ##
def make_win_packages_factory(generator):
	f = factory.BuildFactory()
	f.addStep(ShellCommand(
	name= "remove_old_build_dir",
	command=["dojob", 
	WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
	alwaysRun=True
	));

	f.addStep(ShellCommand(
	name= "create_new_build_dir",
	command=["dojob", WithProperties("mkdir c:\\buildbot\\%(buildername)s\\build || exit 0")]
	));

	f.addStep(FileDownload(
	mastersrc=WithProperties("%(tarballpath)s"),
	slavedest=WithProperties("c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s.tar.gz")));

	f.addStep(ShellCommand(
	name = "unpack_tarball",
	command=["dojob", WithProperties("cd  c:\\buildbot\\%(buildername)s\\build && cmake -E tar xfz %(distdirname)s.tar.gz")]
	));


	f.addStep(Compile(
	command=["dojob", 
	WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake . -DWITH_EMBEDDED_SERVER=1 -DCOMPILATION_COMMENT=\"mariadb.org binary distribution\" -DWITH_THIRD_PARTY=HeidiSQL -DSIGNCODE=ON -G \"" + generator + "\"")]
	))

	f.addStep(Compile(
	name = "build_zip",
	command=["dojob", 
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config RelWithDebInfo --target package")],
	warningPattern=vsWarningPattern,
	warningExtractor=Compile.warnExtractFromRegexpGroups
	))

	f.addStep(getMTR(
	test_type="nm", test_info="Normal test suite",
	command=["dojob", 
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\\mysql-test && perl mysql-test-run.pl  --verbose-restart main.wait_timeout --testcase-timeout=45 --retry=3")]
	))


	f.addStep(Compile(
	name = "build_msi",
	command=["dojob",  WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\ && cmake --build . --config RelWithDebInfo --target msi")],
	warningPattern=vsWarningPattern,
	warningExtractor=Compile.warnExtractFromRegexpGroups
	))


	f.addStep(ShellCommand(
	name= "create_publish_dir",
	command=["dojob", 
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
	))

	f.addStep(ShellCommand(
	name= "publish",
	command=["dojob", 
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && xcopy /y /f *.msi c:\\build_archive\\%(branch)s\\%(revision)s && xcopy /y /f *.zip c:\\build_archive\\%(branch)s\\%(revision)s && md5sums c:/build_archive/%(branch)s/%(revision)s")]
	))

#        f.addStep(DirectoryUpload(
#           doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches),
#           slavesrc=WithProperties("c:\\build_archive\\%(branch)s\\%(revision)s"),
#           masterdest=WithProperties("/media/backup/archive/pack/%(branch)s/build-%(tarbuildnum)s/%(buildername)s"),
#           compress="gz"))

	return f


bld_winx64_packages = {
	'name': "winx64-packages",
	'slavename': "bb-win32",
	'builddir': "winx64-packages",
	'factory': make_win_packages_factory("Visual Studio 10 Win64"),
        "nextBuild": myNextBuild,
	"category": "package"
}

bld_win32_packages = {
	'name': "win32-packages",
	'slavename': "bb-win32",
	'builddir': "win32-packages",
	'factory': make_win_packages_factory("Visual Studio 10"),
        "nextBuild": myNextBuild,
	"category": "package"
}

f_sol10_64_bintar = factory.BuildFactory()
f_sol10_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                       slavedest=WithProperties("%(distname)s")))
f_sol10_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol10_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                         subdir="%(distdirname)s/",
                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
                                         env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                              "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
f_sol10_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol10_64_bintar.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol10_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol10_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_sol10_64 = {"name": "sol10-64",
                "slavename": "solaris10-x86",
                "builddir": "solaris10-x86",
                "factory": f_sol10_64_bintar,
                "nextBuild": myNextBuild,
                "category": "package",
                }

f_p8_rhel6_bintar = factory.BuildFactory()
f_p8_rhel6_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel6_bintar.addStep(maybe_git_checkout)
f_p8_rhel6_bintar.addStep(
    getCompileStep(["sh", "-c", "export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "CXX": "g++ -mminimal-toc",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
    doStepIf=branch_is_5_5_or_later)
)

f_p8_rhel6_bintar.addStep(SetProperty(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

f_p8_rhel6_bintar.addStep(SetProperty(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

# Disabled to take some pressure off of hasky's net connection 17 Jun 2014 - dbart
#addPackageUploadStep(f_p8_rhel6_bintar, '"%(bindistname)s"')

# in place of the disabled addPackageUploadStep, here is a step that archives
# builds locally under /opt/buildbot/builds/:
f_p8_rhel6_bintar.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(revision)s"
mkdir -p "%(revision)s"
chmod 755 "%(revision)s"
""" + 'cp -rp ' + '"%(bindistname)s"' + ' "%(revision)s/"\n' + """
cd "%(revision)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
find . -type f|xargs chmod 644
cd ..
if [ ! -e "/opt/buildbot/%(branch)s/%(revision)s/%(buildername)s" ]
then
mkdir -p "/opt/buildbot/builds/%(branch)s/%(revision)s/%(buildername)s"
fi
rsync -a %(revision)s/ /opt/buildbot/builds/%(branch)s/%(revision)s/%(buildername)s/
""")]))

f_p8_rhel6_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_p8_rhel6 = {"name": "bintar-rhel6-p8",
                "slavename": "power8-vlp01",
                "builddir": "power8-vlp01",
                "factory": f_p8_rhel6_bintar,
                "nextBuild": myNextBuild,
                "category": "package",
                }


f_bsd9_64_bintar = factory.BuildFactory()
f_bsd9_64_bintar.addStep(
  FileDownload(
  mastersrc=WithProperties("%(tarballpath)s"),
  slavedest=WithProperties("%(distname)s"),
  doStepIf=branch_is_5_5_or_later
))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c", 
            WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))

f_bsd9_64_bintar.addStep(
   Compile(command=["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-pentium64-max --extra-configs=--without-plugin_innodb_plugin")],
      logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
      doStepIf=branch_is_5_5_or_later,
      env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
           "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
      doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))

f_bsd9_64_bintar.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        doStepIf=branch_is_5_5_or_later
        ))

addPackageArchiveStep(f_bsd9_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s",
  branch_is_5_5_or_later)

f_bsd9_64_bintar.addStep(getMTR(
        doStepIf=branch_is_5_5_or_later,
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("(killall mysqld || true) && cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --skip-ndb")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_bsd9_64 = {"name": "bsd9-64",
                "slavename": "bsd9",
                "builddir": "bsd9",
                "factory": f_bsd9_64_bintar,
                "nextBuild": myNextBuild,
                "category": "package",
                }


f_kvm_dgcov_jaunty_amd64= factory.BuildFactory()
f_kvm_dgcov_jaunty_amd64.addStep(Compile(
        description=["compiling"],
        descriptionDone=["compile"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2250.log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
        WithProperties("""
set -ex
rm -Rf build
time bzr co "lp:~maria-captains/maria/%(branch)s" build
cd build
BUILD/autorun.sh
CFLAGS='-fprofile-arcs -ftest-coverage -DDISABLE_TAO_ASM -DHAVE_gcov -O0 -g  -Wno-unused-parameter' CXXFLAGS='-fprofile-arcs -ftest-coverage  -DDISABLE_TAO_ASM -DHAVE_gcov  -O0 -g  -Wno-unused-parameter' LDFLAGS='-fprofile-arcs -ftest-coverage' ./configure --enable-assembler --with-extra-charsets=complex --enable-thread-safe-client --with-big-tables --with-plugin-aria --with-aria-tmp-tables --with-readline --with-debug --with-ssl --with-plugins=max --with-embedded-server --with-libevent --with-zlib-dir=bundled --enable-local-infile
make -j6
""")]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
            description=["unit", "testing"],
            descriptionDone=["unit", "test"],
            logfiles={"kernel": "kernel_2250.log"},
            timeout=7200,
            doStepIf=branch_is_5_123,
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build && make test-unit"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="emb",
            test_info="Embedded with",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --embedded-server --mem --force --retry=3 --parallel=2 --testcase-timeout=45"]))
#f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
#            test_type="pbxt",
#            test_info="PBXT test suite with",
#            doStepIf=branch_is_5_123,
#            logfiles={"kernel": "kernel_2250.log"},
#            env={"TERM": "vt102"},
#            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
#                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=pbxt --mysqld=--default-storage-engine=pbxt --mem --parallel=2 --force --retry=3"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --mem --testcase-timeout=45 --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="pm",
            test_info="Normal run, with --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --ps-protocol --mem --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="xtra",
            test_info="Some additional test suites",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=funcs_1,funcs_2,stress,jp --mem --parallel=2 --force --retry=3 --testcase-timeout=45 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
        description=["dgcov'ing"],
        descriptionDone=["dgcov"],
        logfiles={"kernel": "kernel_2250.log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                 "cd build && dgcov.pl last:1"]))

bld_kvm_dgcov_jaunty_i386 = {"name": "kvm-dgcov-jaunty-i386",
                             "slavenames": kvm_slaves,
                             "builddir": "kvm-dgcov-jaunty-i386",
                             "factory": f_kvm_dgcov_jaunty_amd64,
                             "nextBuild": myNextBuild,
                             "category": "main",
                             }

def getFulltest(buildcmd, vm_img, port):
    kvm_log = "kernel_"+port+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+port, "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory=3584",
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+port+".qcow2"
    def mtr_step(type, info, args, doRun= True):
        return MTR(
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --retry=3 --max-save-core=0 --max-save-datadir=1 " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    f= factory.BuildFactory()

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+vm_img,
                 "terrier.askmonty.org::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(Test(
        timeout=14400,
        description=["unit", "testing"],
        descriptionDone=["unit", "test"],
        doStepIf=branch_is_5_123,
        logfiles={"kernel": kvm_log},
        env={"TERM": "vt102"},
        command=kvm_args + [tmp_img,
        WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
cd "buildbot/build/%(distdirname)s"
make test-unit
""")]))

    f.addStep(mtr_step("emb-big", "Embedded with --big",
        "--embedded-server --big --big --parallel=2 --testcase-timeout=45",
        branch_is_not_galera))

    f.addStep(mtr_step("n-big", "Big (no --ps-protocol)",
        "--big --big --parallel=2 --testcase-timeout=45"))

    f.addStep(mtr_step("p-big", "ps-protocol big)",
        "--big --big --ps-protocol --parallel=2 --testcase-timeout=45"))

    f.addStep(mtr_step("xtra-big", "Some additional test suites, with --big",
        "--suite=funcs_1,funcs_2,stress,jp --big --big --parallel=2 " +
                       "--testcase-timeout=45"))

    f.addStep(mtr_step("emb", "Embedded",
        "--mem --embedded-server --parallel=4",
        branch_is_not_galera))

    f.addStep(mtr_step("n", "Normal (no --ps-protocol)",
        "--mem --parallel=4"))

    f.addStep(mtr_step("p", "ps-protocol",
        "--mem --parallel=4 --ps-protocol"))

    f.addStep(mtr_step("xtra", "Some additional test suites",
        "--mem --suite=funcs_1,funcs_2,stress,jp --mem --parallel=4"))

    return f


f_kvm_fulltest= getFulltest(
    'EXTRA_FLAGS="-DFORCE_INIT_OF_VARS" ' +
        'EXTRA_CONFIGS="--with-embedded-privilege-control" ' +
        'AM_EXTRA_MAKEFLAGS="VERBOSE=1" BUILD/compile-amd64-max',
    "vm-precise-amd64-fulltest.qcow2",
    "2271"
    )

# Somehow terrier2 does not seem to be able to shutdown cleanly the VM and
# ends up corrupting the build, causing wierd failures about missing
# my_safe_process in MTR runs. So don't use that host.
bld_kvm_fulltest= {
    "name": "kvm-fulltest",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2"],
    "builddir": "kvm-fulltest",
    "factory": f_kvm_fulltest,
    "nextBuild": myNextBuild,
    "category": "experimental",
    }

f_kvm_fulltest2= getFulltest(
    'EXTRA_FLAGS="-O2 -Wuninitialized -DFORCE_INIT_OF_VARS" ' +
        'EXTRA_CONFIGS="--with-embedded-privilege-control" ' +
        'AM_EXTRA_MAKEFLAGS="VERBOSE=1" BUILD/compile-pentium-debug-max',
    "vm-precise-i386-fulltest.qcow2",
    "2272"
    )

bld_kvm_fulltest2= {
    "name": "kvm-fulltest2",
    "slavenames": ["knielsen-kvm-x86", "terrier2", "centos56-quality2"],
    "builddir": "kvm-fulltest2",
    "factory": f_kvm_fulltest2,
    "nextBuild": myNextBuild,
    "category": "experimental",
    }

def getConnectorCBuilder(name, kvm_image, port, cpu):
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
bzr co lp:mariadb-native-client build
cd build
cmake .
make package
echo *.tar.gz > ../bindistname.txt
#mv "$(cat ../../bindistname.txt)" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s"', "%(revision)s")
    return {'name': name, 'slavenames': ["terrier2", "knielsen-kvm-x86", "centos56-quality2"], 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": "package" }


bld_kvm_connectorc_precise_x86 = getConnectorCBuilder("kvm-connectorc-precise-x86", "vm-precise-i386", "2268", "qemu64")


#f_freebsd_amd64 = factory.BuildFactory()
#f_freebsd_amd64.addStep(bzr_checkout)
#f_freebsd_amd64.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
#                                       env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                            "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_freebsd_amd64.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --skip-ndb"]))
#
#bld_freebsd_amd64 = {'name': "freebsd-amd64",
#                     'slavename': "jakob-freebsd",
#                     'builddir': "jakob-freebsd",
#                     'factory': f_freebsd_amd64,
#                     "nextBuild": myNextBuild,
#                     "category": "new",
#                     }


#f_adutko3 = factory.BuildFactory()
#f_adutko3.addStep(bzr_checkout)
#f_adutko3.addStep(getCompileStep(["BUILD/compile-pentium64-valgrind-max"],
#                                  env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_adutko3.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3"]))
#
#bld_adutko3 = {'name': "adutko-generic",
#               'slavename': "adutko3",
#               'builddir': "adutko3",
#               'factory': f_adutko3,
#               "nextBuild": myNextBuild,
#               "category": "new",
#               }

#f_aps82_204 = factory.BuildFactory()
#f_aps82_204.addStep(bzr_checkout)
#f_aps82_204.addStep(getCompileStep(["BUILD/compile-pentium64-valgrind-max"],
#                                    env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_aps82_204.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3"]))
#
#bld_aps82_204 = {'name': "aps82-204-generic",
#                'slavename': "aps82-204",
#                'builddir': "aps82_204",
#                'factory': f_aps82_204,
#                "nextBuild": myNextBuild,
#                "category": "new",
#                }


f_dan_debug = factory.BuildFactory()
f_dan_debug.addStep(maybe_bzr_checkout)
f_dan_debug.addStep(maybe_git_checkout)
f_dan_debug.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
                          env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
f_dan_debug.addStep(getMTR(
        test_type="nm",
        test_info="Debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=3 --force --retry=3 --skip-ndb --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=3))

f_dan_debug.addStep(getMTR(
        test_type="pm",
        test_info="Debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=3 --force --retry=3 --skip-ndb --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=3))

bld_dan_debug = {'name': "bld-dan-debug",
                'slavename': "dan_demeter1",
                'builddir': "dan_demeter1",
                'factory': f_dan_debug,
                "nextBuild": myNextBuild,
                "category": "new",
                }


f_dan_release = factory.BuildFactory()
f_dan_release.addStep(maybe_bzr_checkout)
f_dan_release.addStep(maybe_git_checkout)
f_dan_release.addStep(getCompileStep(["BUILD/compile-amd64-max"],
                          env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
                               "EXTRA_CONFIGS" : "--without-plugin=perfschema_storage_engine",
                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1",
#                               "CC": "clang",
#                               "CXX": "clang"
}))
f_dan_release.addStep(getMTR(
        test_type="nm",
        test_info="Non-debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=3 --force --retry=3 --skip-ndb --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=3))

f_dan_release.addStep(getMTR(
        test_type="pm",
        test_info="Non-debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=3 --force --retry=3 --skip-ndb --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=3))

bld_dan_release = {'name': "bld-dan-release",
                'slavename': "dan_demeter2",
                'builddir': "dan_demeter2",
                'factory': f_dan_release,
                "nextBuild": myNextBuild,
                "category": "new",
                }


def get_debpkg(name, kvm_image, port):
    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu=qemu64", "--startup-timeout=600"]
    debpkg_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    debpkg_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    debpkg_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "knielsen-kvm-x86"),
        haltOnFailure=True,
        command=["rsync", "-z", "-a", "-v", "-L",
                 "terrier.askmonty.org::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    debpkg_fact.addStep(Compile(
        description=["building", "deb"],
        descriptionDone=["build", "deb"],
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y git-buildpackage libjemalloc-dev'
gbp-clone --pristine-tar git://github.com/ottok/mariadb-5.5.git
cd mariadb-5.5
git-buildpackage --git-pristine-tar --git-notify=false -us -uc
""")]))
    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name,
            'factory': debpkg_fact,
            "category": "new"}

bld_debpkg_trusty = get_debpkg("debpkg-trusty", "vm-trusty-amd64", "2297")
bld_debpkg_sid = get_debpkg("debpkg-sid", "vm-sid-amd64", "2298")


c['builders'] = [
                bld_work_valgrind, bld_gcov, 
		bld_compile_connectors, bld_test_handlersocket, bld_customer_data,
#                 bld_valgrind_32, bld_rel_amd64,
#                 bld_dbg_x86,
#                 bld_archivist_amd64, bld_archivist_cnc,
#                 bld_dbg2_x86,
#                 bld_sol_sparc_32,
		bld_rqg_mariaengine, 
		bld_rqg_replication, bld_rqg_replication_checksum,
		bld_rqg_optimizer,
#                 bld_toby_amd64, bld_toby_sparc32, bld_toby_sparc64,
#                 bld_linux_debug,
#                 bld_adutko_amd64, bld_adutko_alpha,
#                 bld_sanja_gentoo_amd64,
#                 bld_valgrind, 
                 bld_kvm_tarbake_jaunty_x86,
#                 bld_kvm_zip_winxp_x86,
                 bld_opensolaris_511_bintar,
                 bld_kvm_rpm_centos5_x86, bld_kvm_rpm_centos5_amd64,
                 bld_kvm_rpm_centos6_x86, bld_kvm_rpm_centos6_amd64,
#                 bld_kvm_rpm_fedora16_x86, bld_kvm_rpm_fedora16_amd64,
#                 bld_kvm_rpm_fedora17_x86, bld_kvm_rpm_fedora17_amd64,
#                 bld_kvm_rpm_fedora18_x86, bld_kvm_rpm_fedora18_amd64,
                 bld_kvm_rpm_fedora19_x86, bld_kvm_rpm_fedora19_amd64,
                 bld_kvm_rpm_fedora20_x86, bld_kvm_rpm_fedora20_amd64,
#                 bld_kvm_rpm_opensuse12_x86, bld_kvm_rpm_opensuse12_amd64,
#                 bld_kvm_rpm_rhel6_x86, # Some kvm images are missing
#                 bld_kvm_rpm_rhel6_amd64,
                 bld_kvm_rpm_rhel5_x86,
                 bld_kvm_rpm_rhel5_amd64,
#                 bld_kvm_deb_debian4_amd64, bld_kvm_deb_debian4_x86,
#                 bld_kvm_deb_debian5_amd64, bld_kvm_deb_debian5_x86,
                 bld_kvm_deb_debian6_amd64, bld_kvm_deb_debian6_x86,
                 bld_kvm_deb_wheezy_amd64, bld_kvm_deb_wheezy_x86,
                 bld_kvm_deb_sid_amd64, bld_kvm_deb_sid_x86,
#                 bld_kvm_deb_hardy_amd64, bld_kvm_deb_hardy_x86,
#                 bld_kvm_deb_intrepid_amd64, bld_kvm_deb_intrepid_x86,
#                 bld_kvm_deb_jaunty_amd64, bld_kvm_deb_jaunty_x86,
#                 bld_kvm_deb_karmic_amd64, bld_kvm_deb_karmic_x86,
                 bld_kvm_deb_lucid_amd64, bld_kvm_deb_lucid_x86,
#                 bld_kvm_deb_maverick_amd64, bld_kvm_deb_maverick_x86,
#                 bld_kvm_deb_natty_amd64, bld_kvm_deb_natty_x86,
#                 bld_kvm_deb_oneiric_amd64, bld_kvm_deb_oneiric_x86,
                 bld_kvm_deb_precise_amd64, bld_kvm_deb_precise_x86,
#                 bld_kvm_deb_quantal_amd64, bld_kvm_deb_quantal_x86,
#                 bld_kvm_deb_raring_amd64, bld_kvm_deb_raring_x86,
                 bld_kvm_deb_saucy_amd64, bld_kvm_deb_saucy_x86,
                 bld_kvm_deb_trusty_amd64, bld_kvm_deb_trusty_x86,
                 bld_kvm_bintar_hardy_amd64, bld_kvm_bintar_hardy_x86,
#                 bld_kvm_bintar_precise_amd64, bld_kvm_bintar_precise_x86,
                 bld_kvm_bintar_quantal_amd64, bld_kvm_bintar_quantal_x86,
                 bld_kvm_bintar_centos5_amd64, bld_kvm_bintar_centos5_x86,
#                bld_opensolaris_511_x86,
#                 bld_mac_mini_x86_dbg,
#                 bld_fedora13_x86_dbg,
#                bld_win7_x86,	# can not run 24/7
               bld_winx64_packages,
               bld_win32_packages,
		bld_win32_philip_debug,
		bld_win64_philip_release,
 
#                bld_upgrade_mysql51_mariadb52_bintar,
                 bld_sol10_64,
                 bld_bsd9_64,
                 bld_kvm_dgcov_jaunty_i386,
                 bld_kvm_fulltest,
                 bld_kvm_fulltest2,
#                 bld_freebsd_amd64,
#                 bld_adutko3,
#                 bld_macintosh,
                 bld_labrador,
                 bld_labrador_cclient,
#                 bld_centos5_cclient,
                 bld_centos5_x64_cclient,
#                 bld_aps82_204,
                 bld_win_rqg_se,
                 bld_win_jdbc,
                 bld_win_odbc,
                 bld_win_cclient,
                bld_kvm_connectorc_precise_x86,
                bld_dan_debug,
                bld_dan_release,
                bld_raspberrypi,
                bld_power01,
                bld_p8_rhel6,
                bld_debpkg_trusty,
                bld_debpkg_sid,
                 ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011, allowForce=False,
    change_hook_dialects={ 'github' : True }))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mariabuildbot",
                channels=["maria"],
                password=configDict["cfg"]["ircPassword"],
                notify_events={
                  "exception": 1,
                  "successToFailure": 1,
                  "failureToSuccess": 1,
                },
                allowForce=True,
                )
# Disable it until we fix it to only notify about main trees.
#c["status"].append(irc)
        

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot-reports@hasky.askmonty.org",
                                      extraRecipients=["maria-buildbot-reports@lists.askmonty.org"],
                                      sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MariaDB"
c['projectURL'] = "https://launchpad.net/maria"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://askmonty.org/buildbot/"

c['buildHorizon'] = 250
c['logHorizon'] = 200
c['buildCacheSize'] = 5000
c['changeCacheSize'] = 10000
