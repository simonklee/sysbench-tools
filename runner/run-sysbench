#!/bin/bash
set -u

usage()
{
cat << EOF
usage: $0 options

This script runs sysbench and iostat concurrently in iterations with each iteration using a higher 
number of threads than the last. The results are written to a new result directory each time the 
script is run. A file '.run_number' keeps track of the result directory numbering ensuring that 
each new run gets a new directory.

OPTIONS:
   -h   MySQL host                              [localhost]
   -P   MySQL port                              [3306]
   -s   MySQL socket                            [/tmp/mysql.sock]
   -u   MySQL username                          [root]
   -p   MySQL password
   -w   ReadWrite mode (on/off)                         [on]
   -o   Timeout for each sysbench run           [60]
   -r   Directory to print results to           [./results]
   -i   Id
   -t   List of thread counts to iterate [4 8 16 32 64 128 256]
EOF
}

host=localhost
port=3306
socket=/tmp/mysql.sock
user=root
password=foobar
readwrite=on
readonly=off
timeout=60
threads="8,16,32,64,128"
resultsdir=./results
connparams=
sysbench=./sysbench/sysbench/sysbench
size=1000000
id=

while getopts h:P:s:u:p:w:o:r:t:i: name
do
        case $name in
                h) host="$OPTARG";;
                P) port="$OPTARG";;
                s) socket="$OPTARG";;
                u) user="$OPTARG";;
                p) password="$OPTARG";;
                w) readwrite="$OPTARG";;
                o) timeout="$OPTARG";;
                r) resultsdir="$OPTARG";;
                t) threads="$OPTARG";;
                i) id="$OPTARG";;
                ?) usage
                   exit;;
        esac
done

threads=${threads//,/ }

if [ "$readwrite" == "off" ]; then
        readonly=on
fi
if [ ! "$socket" == "/tmp/mysql.sock" ]; then
	connparams="--mysql-socket=$socket --mysql-user=$user --mysql-password=$password"
else 
	connparams="--mysql-host=$host --mysql-port=$port --mysql-user=$user --mysql-password=$password"
fi

# Determine run number for selecting an output directory
mkdir -p $resultsdir
run_num=-1

if [ -f "$resultsdir/.run_number" ]; then
  read run_num < $resultsdir/.run_number
fi

if [ $run_num -eq -1 ]; then
        run_num=1
fi

if [ $run_num -lt 10 ]; then
        outdir=result-0$run_num
else 
        outdir=result-$run_num
fi

if [ -n ${id} ]; then
    outdir=$outdir-${id}
fi

mkdir -p $resultsdir/$outdir || exit 1

run_num=`expr $run_num + 1`
echo $run_num > $resultsdir/.run_number

for thread in $threads
do
        # Run iostat
        iostat -dx 10 $(($timeout/10+1))  >> $resultsdir/$outdir/iostat.$thread.res &
        
        # Run sysbench
        $sysbench $connparams --test=tests/oltp.lua --init-rng=on --num-threads=$thread \
        --oltp-table-size=${size} --oltp-read-only=$readonly --report-interval=10 \
        --oltp-dist-type=uniform --max-time=$timeout --max-requests=0 \
        --percentile=99 run >> $resultsdir/$outdir/sysbench.$thread.res
        
        sleep 10

done
